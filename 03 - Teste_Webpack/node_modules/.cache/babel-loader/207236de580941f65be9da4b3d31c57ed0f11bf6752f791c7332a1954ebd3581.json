{"ast":null,"code":"'use strict';\n\nvar defined = require('defined');\nvar EventEmitter = require('events').EventEmitter;\nvar inherits = require('inherits');\nvar through = require('through');\nvar resumer = require('resumer');\nvar inspect = require('object-inspect');\nvar callBound = require('call-bind/callBound');\nvar has = require('has');\nvar $exec = callBound('RegExp.prototype.exec');\nvar yamlIndicators = /:|-|\\?/;\nvar nextTick = typeof setImmediate !== 'undefined' ? setImmediate : process.nextTick;\nfunction coalesceWhiteSpaces(str) {\n  return String(str).replace(/\\s+/g, ' ');\n}\nfunction invalidYaml(str) {\n  return $exec(yamlIndicators, str) !== null;\n}\nfunction encodeResult(res, count) {\n  var output = '';\n  output += (res.ok ? 'ok ' : 'not ok ') + count;\n  output += res.name ? ' ' + coalesceWhiteSpaces(res.name) : '';\n  if (res.skip) {\n    output += ' # SKIP' + (typeof res.skip === 'string' ? ' ' + coalesceWhiteSpaces(res.skip) : '');\n  } else if (res.todo) {\n    output += ' # TODO' + (typeof res.todo === 'string' ? ' ' + coalesceWhiteSpaces(res.todo) : '');\n  }\n  output += '\\n';\n  if (res.ok) {\n    return output;\n  }\n  var outer = '  ';\n  var inner = outer + '  ';\n  output += outer + '---\\n';\n  output += inner + 'operator: ' + res.operator + '\\n';\n  if (has(res, 'expected') || has(res, 'actual')) {\n    var ex = inspect(res.expected, {\n      depth: res.objectPrintDepth\n    });\n    var ac = inspect(res.actual, {\n      depth: res.objectPrintDepth\n    });\n    if (Math.max(ex.length, ac.length) > 65 || invalidYaml(ex) || invalidYaml(ac)) {\n      output += inner + 'expected: |-\\n' + inner + '  ' + ex + '\\n';\n      output += inner + 'actual: |-\\n' + inner + '  ' + ac + '\\n';\n    } else {\n      output += inner + 'expected: ' + ex + '\\n';\n      output += inner + 'actual:   ' + ac + '\\n';\n    }\n  }\n  if (res.at) {\n    output += inner + 'at: ' + res.at + '\\n';\n  }\n  var actualStack = res.actual && (typeof res.actual === 'object' || typeof res.actual === 'function') ? res.actual.stack : undefined;\n  var errorStack = res.error && res.error.stack;\n  var stack = defined(actualStack, errorStack);\n  if (stack) {\n    var lines = String(stack).split('\\n');\n    output += inner + 'stack: |-\\n';\n    for (var i = 0; i < lines.length; i++) {\n      output += inner + '  ' + lines[i] + '\\n';\n    }\n  }\n  output += outer + '...\\n';\n  return output;\n}\nfunction getNextTest(results) {\n  if (!results._only) {\n    return results.tests.shift();\n  }\n  do {\n    var t = results.tests.shift();\n    if (t && results._only === t) {\n      return t;\n    }\n  } while (results.tests.length !== 0);\n  return void undefined;\n}\nfunction Results() {\n  if (!(this instanceof Results)) {\n    return new Results();\n  }\n  this.count = 0;\n  this.fail = 0;\n  this.pass = 0;\n  this.todo = 0;\n  this._stream = through();\n  this.tests = [];\n  this._only = null;\n  this._isRunning = false;\n}\ninherits(Results, EventEmitter);\nResults.prototype.createStream = function (opts) {\n  if (!opts) {\n    opts = {};\n  }\n  var self = this;\n  var output;\n  var testId = 0;\n  if (opts.objectMode) {\n    output = through();\n    self.on('_push', function ontest(t, extra) {\n      if (!extra) {\n        extra = {};\n      }\n      var id = testId++;\n      t.once('prerun', function () {\n        var row = {\n          type: 'test',\n          name: t.name,\n          id: id,\n          skip: t._skip,\n          todo: t._todo\n        };\n        if (has(extra, 'parent')) {\n          row.parent = extra.parent;\n        }\n        output.queue(row);\n      });\n      t.on('test', function (st) {\n        ontest(st, {\n          parent: id\n        });\n      });\n      t.on('result', function (res) {\n        if (res && typeof res === 'object') {\n          res.test = id;\n          res.type = 'assert';\n        }\n        output.queue(res);\n      });\n      t.on('end', function () {\n        output.queue({\n          type: 'end',\n          test: id\n        });\n      });\n    });\n    self.on('done', function () {\n      output.queue(null);\n    });\n  } else {\n    output = resumer();\n    output.queue('TAP version 13\\n');\n    self._stream.pipe(output);\n  }\n  if (!this._isRunning) {\n    this._isRunning = true;\n    nextTick(function next() {\n      var t;\n      while (t = getNextTest(self)) {\n        t.run();\n        if (!t.ended) {\n          t.once('end', function () {\n            nextTick(next);\n          });\n          return;\n        }\n      }\n      self.emit('done');\n    });\n  }\n  return output;\n};\nResults.prototype.push = function (t) {\n  var self = this;\n  self.tests.push(t);\n  self._watch(t);\n  self.emit('_push', t);\n};\nResults.prototype.only = function (t) {\n  this._only = t;\n};\nResults.prototype._watch = function (t) {\n  var self = this;\n  function write(s) {\n    self._stream.queue(s);\n  }\n  t.once('prerun', function () {\n    var premsg = '';\n    if (t._skip) {\n      premsg = 'SKIP ';\n    } else if (t._todo) {\n      premsg = 'TODO ';\n    }\n    write('# ' + premsg + coalesceWhiteSpaces(t.name) + '\\n');\n  });\n  t.on('result', function (res) {\n    if (typeof res === 'string') {\n      write('# ' + res + '\\n');\n      return;\n    }\n    write(encodeResult(res, self.count + 1));\n    self.count++;\n    if (res.ok || res.todo) {\n      self.pass++;\n    } else {\n      self.fail++;\n      self.emit('fail');\n    }\n  });\n  t.on('test', function (st) {\n    self._watch(st);\n  });\n};\nResults.prototype.close = function () {\n  var self = this;\n  if (self.closed) {\n    self._stream.emit('error', new Error('ALREADY CLOSED'));\n  }\n  self.closed = true;\n  function write(s) {\n    self._stream.queue(s);\n  }\n  write('\\n1..' + self.count + '\\n');\n  write('# tests ' + self.count + '\\n');\n  write('# pass  ' + (self.pass + self.todo) + '\\n');\n  if (self.todo) {\n    write('# todo  ' + self.todo + '\\n');\n  }\n  if (self.fail) {\n    write('# fail  ' + self.fail + '\\n');\n  } else {\n    write('\\n# ok\\n');\n  }\n  self._stream.queue(null);\n};\nmodule.exports = Results;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}