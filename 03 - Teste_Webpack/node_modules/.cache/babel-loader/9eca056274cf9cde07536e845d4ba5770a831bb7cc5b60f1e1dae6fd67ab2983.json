{"ast":null,"code":"var Stream = require(\"stream\");\nvar writeMethods = [\"write\", \"end\", \"destroy\"];\nvar readMethods = [\"resume\", \"pause\"];\nvar readEvents = [\"data\", \"close\"];\nvar slice = Array.prototype.slice;\nmodule.exports = duplex;\nfunction forEach(arr, fn) {\n  if (arr.forEach) {\n    return arr.forEach(fn);\n  }\n  for (var i = 0; i < arr.length; i++) {\n    fn(arr[i], i);\n  }\n}\nfunction duplex(writer, reader) {\n  var stream = new Stream();\n  var ended = false;\n  forEach(writeMethods, proxyWriter);\n  forEach(readMethods, proxyReader);\n  forEach(readEvents, proxyStream);\n  reader.on(\"end\", handleEnd);\n  writer.on(\"drain\", function () {\n    stream.emit(\"drain\");\n  });\n  writer.on(\"error\", reemit);\n  reader.on(\"error\", reemit);\n  stream.writable = writer.writable;\n  stream.readable = reader.readable;\n  return stream;\n  function proxyWriter(methodName) {\n    stream[methodName] = method;\n    function method() {\n      return writer[methodName].apply(writer, arguments);\n    }\n  }\n  function proxyReader(methodName) {\n    stream[methodName] = method;\n    function method() {\n      stream.emit(methodName);\n      var func = reader[methodName];\n      if (func) {\n        return func.apply(reader, arguments);\n      }\n      reader.emit(methodName);\n    }\n  }\n  function proxyStream(methodName) {\n    reader.on(methodName, reemit);\n    function reemit() {\n      var args = slice.call(arguments);\n      args.unshift(methodName);\n      stream.emit.apply(stream, args);\n    }\n  }\n  function handleEnd() {\n    if (ended) {\n      return;\n    }\n    ended = true;\n    var args = slice.call(arguments);\n    args.unshift(\"end\");\n    stream.emit.apply(stream, args);\n  }\n  function reemit(err) {\n    stream.emit(\"error\", err);\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}