{"ast":null,"code":"'use strict';\n\nvar defined = require('defined');\nvar createDefaultStream = require('./lib/default_stream');\nvar Test = require('./lib/test');\nvar createResult = require('./lib/results');\nvar through = require('through');\nvar canEmitExit = typeof process !== 'undefined' && process && typeof process.on === 'function' && process.browser !== true;\nvar canExit = typeof process !== 'undefined' && process && typeof process.exit === 'function';\nmodule.exports = function () {\n  var harness;\n  function getHarness(opts) {\n    if (!opts) {\n      opts = {};\n    }\n    opts.autoclose = !canEmitExit;\n    // this override is here since tests fail via nyc if createHarness is moved upwards\n    // eslint-disable-next-line no-use-before-define\n    if (!harness) {\n      harness = createExitHarness(opts);\n    }\n    return harness;\n  }\n  function lazyLoad() {\n    // eslint-disable-next-line no-invalid-this\n    return getHarness().apply(this, arguments);\n  }\n  lazyLoad.only = function () {\n    return getHarness().only.apply(this, arguments);\n  };\n  lazyLoad.createStream = function (opts) {\n    var options = opts || {};\n    if (!harness) {\n      var output = through();\n      getHarness({\n        stream: output,\n        objectMode: options.objectMode\n      });\n      return output;\n    }\n    return harness.createStream(options);\n  };\n  lazyLoad.onFinish = function () {\n    return getHarness().onFinish.apply(this, arguments);\n  };\n  lazyLoad.onFailure = function () {\n    return getHarness().onFailure.apply(this, arguments);\n  };\n  lazyLoad.getHarness = getHarness;\n  return lazyLoad;\n}();\nfunction createHarness(conf_) {\n  var results = createResult();\n  if (!conf_ || conf_.autoclose !== false) {\n    results.once('done', function () {\n      results.close();\n    });\n  }\n  function test(name, conf, cb) {\n    var t = new Test(name, conf, cb);\n    test._tests.push(t);\n    (function inspectCode(st) {\n      st.on('test', function sub(st_) {\n        inspectCode(st_);\n      });\n      st.on('result', function (r) {\n        if (!r.todo && !r.ok && typeof r !== 'string') {\n          test._exitCode = 1;\n        }\n      });\n    })(t);\n    results.push(t);\n    return t;\n  }\n  test._results = results;\n  test._tests = [];\n  test.createStream = function (opts) {\n    return results.createStream(opts);\n  };\n  test.onFinish = function (cb) {\n    results.on('done', cb);\n  };\n  test.onFailure = function (cb) {\n    results.on('fail', cb);\n  };\n  var only = false;\n  test.only = function () {\n    if (only) {\n      throw new Error('there can only be one only test');\n    }\n    if (conf_.noOnly) {\n      throw new Error('`only` tests are prohibited');\n    }\n    only = true;\n    var t = test.apply(null, arguments);\n    results.only(t);\n    return t;\n  };\n  test._exitCode = 0;\n  test.close = function () {\n    results.close();\n  };\n  return test;\n}\nfunction createExitHarness(conf) {\n  var config = conf || {};\n  var harness = createHarness({\n    autoclose: defined(config.autoclose, false),\n    noOnly: defined(conf.noOnly, defined(process.env.NODE_TAPE_NO_ONLY_TEST, false))\n  });\n  var stream = harness.createStream({\n    objectMode: conf.objectMode\n  });\n  var es = stream.pipe(conf.stream || createDefaultStream());\n  if (canEmitExit) {\n    // eslint-disable-next-line no-unused-vars\n    es.on('error', function (err) {\n      harness._exitCode = 1;\n    });\n  }\n  var ended = false;\n  stream.on('end', function () {\n    ended = true;\n  });\n  if (config.exit === false) {\n    return harness;\n  }\n  if (!canEmitExit || !canExit) {\n    return harness;\n  }\n  process.on('exit', function (code) {\n    // let the process exit cleanly.\n    if (code !== 0) {\n      return;\n    }\n    if (!ended) {\n      var only = harness._results._only;\n      for (var i = 0; i < harness._tests.length; i++) {\n        var t = harness._tests[i];\n        if (!only || t === only) {\n          t._exit();\n        }\n      }\n    }\n    harness.close();\n    process.exit(code || harness._exitCode); // eslint-disable-line no-process-exit\n  });\n\n  return harness;\n}\nmodule.exports.createHarness = createHarness;\nmodule.exports.Test = Test;\nmodule.exports.test = module.exports; // tap compat\nmodule.exports.test.skip = Test.skip;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}