{"ast":null,"code":"/*\r\n== malihu jquery custom scrollbar plugin == \r\nVersion: 3.1.3 \r\nPlugin URI: http://manos.malihu.gr/jquery-custom-content-scroller \r\nAuthor: malihu\r\nAuthor URI: http://manos.malihu.gr\r\nLicense: MIT License (MIT)\r\n*/\n\n/*\r\nCopyright Manos Malihutsakis (email: manos@malihu.gr)\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in\r\nall copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\nTHE SOFTWARE.\r\n*/\n\n/*\r\nThe code below is fairly long, fully commented and should be normally used in development. \r\nFor production, use either the minified jquery.mCustomScrollbar.min.js script or \r\nthe production-ready jquery.mCustomScrollbar.concat.min.js which contains the plugin \r\nand dependencies (minified). \r\n*/\n\n(function (factory) {\n  if (typeof module !== \"undefined\" && module.exports) {\n    module.exports = factory;\n  } else {\n    factory(jQuery, window, document);\n  }\n})(function ($) {\n  (function (init) {\n    var _rjs = typeof define === \"function\" && define.amd,\n      /* RequireJS */\n      _njs = typeof module !== \"undefined\" && module.exports,\n      /* NodeJS */\n      _dlp = \"https:\" == document.location.protocol ? \"https:\" : \"http:\",\n      /* location protocol */\n      _url = \"cdnjs.cloudflare.com/ajax/libs/jquery-mousewheel/3.1.13/jquery.mousewheel.min.js\";\n    if (!_rjs) {\n      if (_njs) {\n        require(\"jquery-mousewheel\")($);\n      } else {\n        /* load jquery-mousewheel plugin (via CDN) if it's not present or not loaded via RequireJS \r\n        (works when mCustomScrollbar fn is called on window load) */\n        $.event.special.mousewheel || $(\"head\").append(decodeURI(\"%3Cscript src=\" + _dlp + \"//\" + _url + \"%3E%3C/script%3E\"));\n      }\n    }\n    init();\n  })(function () {\n    /* \r\n    ----------------------------------------\r\n    PLUGIN NAMESPACE, PREFIX, DEFAULT SELECTOR(S) \r\n    ----------------------------------------\r\n    */\n\n    var pluginNS = \"mCustomScrollbar\",\n      pluginPfx = \"mCS\",\n      defaultSelector = \".mCustomScrollbar\",\n      /* \r\n      ----------------------------------------\r\n      DEFAULT OPTIONS \r\n      ----------------------------------------\r\n      */\n\n      defaults = {\n        /*\r\n        set element/content width/height programmatically \r\n        values: boolean, pixels, percentage \r\n        \toption\t\t\t\t\t\tdefault\r\n        \t-------------------------------------\r\n        \tsetWidth\t\t\t\t\tfalse\r\n        \tsetHeight\t\t\t\t\tfalse\r\n        */\n        /*\r\n        set the initial css top property of content  \r\n        values: string (e.g. \"-100px\", \"10%\" etc.)\r\n        */\n        setTop: 0,\n        /*\r\n        set the initial css left property of content  \r\n        values: string (e.g. \"-100px\", \"10%\" etc.)\r\n        */\n        setLeft: 0,\n        /* \r\n        scrollbar axis (vertical and/or horizontal scrollbars) \r\n        values (string): \"y\", \"x\", \"yx\"\r\n        */\n        axis: \"y\",\n        /*\r\n        position of scrollbar relative to content  \r\n        values (string): \"inside\", \"outside\" (\"outside\" requires elements with position:relative)\r\n        */\n        scrollbarPosition: \"inside\",\n        /*\r\n        scrolling inertia\r\n        values: integer (milliseconds)\r\n        */\n        scrollInertia: 950,\n        /* \r\n        auto-adjust scrollbar dragger length\r\n        values: boolean\r\n        */\n        autoDraggerLength: true,\n        /*\r\n        auto-hide scrollbar when idle \r\n        values: boolean\r\n        \toption\t\t\t\t\t\tdefault\r\n        \t-------------------------------------\r\n        \tautoHideScrollbar\t\t\tfalse\r\n        */\n        /*\r\n        auto-expands scrollbar on mouse-over and dragging\r\n        values: boolean\r\n        \toption\t\t\t\t\t\tdefault\r\n        \t-------------------------------------\r\n        \tautoExpandScrollbar\t\t\tfalse\r\n        */\n        /*\r\n        always show scrollbar, even when there's nothing to scroll \r\n        values: integer (0=disable, 1=always show dragger rail and buttons, 2=always show dragger rail, dragger and buttons), boolean\r\n        */\n        alwaysShowScrollbar: 0,\n        /*\r\n        scrolling always snaps to a multiple of this number in pixels\r\n        values: integer, array ([y,x])\r\n        \toption\t\t\t\t\t\tdefault\r\n        \t-------------------------------------\r\n        \tsnapAmount\t\t\t\t\tnull\r\n        */\n        /*\r\n        when snapping, snap with this number in pixels as an offset \r\n        values: integer\r\n        */\n        snapOffset: 0,\n        /* \r\n        mouse-wheel scrolling\r\n        */\n        mouseWheel: {\n          /* \r\n          enable mouse-wheel scrolling\r\n          values: boolean\r\n          */\n          enable: true,\n          /* \r\n          scrolling amount in pixels\r\n          values: \"auto\", integer \r\n          */\n          scrollAmount: \"auto\",\n          /* \r\n          mouse-wheel scrolling axis \r\n          the default scrolling direction when both vertical and horizontal scrollbars are present \r\n          values (string): \"y\", \"x\" \r\n          */\n          axis: \"y\",\n          /* \r\n          prevent the default behaviour which automatically scrolls the parent element(s) when end of scrolling is reached \r\n          values: boolean\r\n          \toption\t\t\t\t\t\tdefault\r\n          \t-------------------------------------\r\n          \tpreventDefault\t\t\t\tnull\r\n          */\n          /*\r\n          the reported mouse-wheel delta value. The number of lines (translated to pixels) one wheel notch scrolls.  \r\n          values: \"auto\", integer \r\n          \"auto\" uses the default OS/browser value \r\n          */\n          deltaFactor: \"auto\",\n          /*\r\n          normalize mouse-wheel delta to -1 or 1 (disables mouse-wheel acceleration) \r\n          values: boolean\r\n          \toption\t\t\t\t\t\tdefault\r\n          \t-------------------------------------\r\n          \tnormalizeDelta\t\t\t\tnull\r\n          */\n          /*\r\n          invert mouse-wheel scrolling direction \r\n          values: boolean\r\n          \toption\t\t\t\t\t\tdefault\r\n          \t-------------------------------------\r\n          \tinvert\t\t\t\t\t\tnull\r\n          */\n          /*\r\n          the tags that disable mouse-wheel when cursor is over them\r\n          */\n          disableOver: [\"select\", \"option\", \"keygen\", \"datalist\", \"textarea\"]\n        },\n        /* \r\n        scrollbar buttons\r\n        */\n        scrollButtons: {\n          /*\r\n          enable scrollbar buttons\r\n          values: boolean\r\n          \toption\t\t\t\t\t\tdefault\r\n          \t-------------------------------------\r\n          \tenable\t\t\t\t\t\tnull\r\n          */\n          /*\r\n          scrollbar buttons scrolling type \r\n          values (string): \"stepless\", \"stepped\"\r\n          */\n          scrollType: \"stepless\",\n          /*\r\n          scrolling amount in pixels\r\n          values: \"auto\", integer \r\n          */\n          scrollAmount: \"auto\"\n          /*\r\n          tabindex of the scrollbar buttons\r\n          values: false, integer\r\n          \toption\t\t\t\t\t\tdefault\r\n          \t-------------------------------------\r\n          \ttabindex\t\t\t\t\tnull\r\n          */\n        },\n\n        /* \r\n        keyboard scrolling\r\n        */\n        keyboard: {\n          /*\r\n          enable scrolling via keyboard\r\n          values: boolean\r\n          */\n          enable: true,\n          /*\r\n          keyboard scrolling type \r\n          values (string): \"stepless\", \"stepped\"\r\n          */\n          scrollType: \"stepless\",\n          /*\r\n          scrolling amount in pixels\r\n          values: \"auto\", integer \r\n          */\n          scrollAmount: \"auto\"\n        },\n        /*\r\n        enable content touch-swipe scrolling \r\n        values: boolean, integer, string (number)\r\n        integer values define the axis-specific minimum amount required for scrolling momentum\r\n        */\n        contentTouchScroll: 25,\n        /*\r\n        enable/disable document (default) touch-swipe scrolling \r\n        */\n        documentTouchScroll: true,\n        /*\r\n        advanced option parameters\r\n        */\n        advanced: {\n          /*\r\n          auto-expand content horizontally (for \"x\" or \"yx\" axis) \r\n          values: boolean, integer (the value 2 forces the non scrollHeight/scrollWidth method, the value 3 forces the scrollHeight/scrollWidth method)\r\n          \toption\t\t\t\t\t\tdefault\r\n          \t-------------------------------------\r\n          \tautoExpandHorizontalScroll\tnull\r\n          */\n          /*\r\n          auto-scroll to elements with focus\r\n          */\n          autoScrollOnFocus: \"input,textarea,select,button,datalist,keygen,a[tabindex],area,object,[contenteditable='true']\",\n          /*\r\n          auto-update scrollbars on content, element or viewport resize \r\n          should be true for fluid layouts/elements, adding/removing content dynamically, hiding/showing elements, content with images etc. \r\n          values: boolean\r\n          */\n          updateOnContentResize: true,\n          /*\r\n          auto-update scrollbars each time each image inside the element is fully loaded \r\n          values: \"auto\", boolean\r\n          */\n          updateOnImageLoad: \"auto\",\n          /*\r\n          auto-update scrollbars based on the amount and size changes of specific selectors \r\n          useful when you need to update the scrollbar(s) automatically, each time a type of element is added, removed or changes its size \r\n          values: boolean, string (e.g. \"ul li\" will auto-update scrollbars each time list-items inside the element are changed) \r\n          a value of true (boolean) will auto-update scrollbars each time any element is changed\r\n          \toption\t\t\t\t\t\tdefault\r\n          \t-------------------------------------\r\n          \tupdateOnSelectorChange\t\tnull\r\n          */\n          /*\r\n          extra selectors that'll allow scrollbar dragging upon mousemove/up, pointermove/up, touchend etc. (e.g. \"selector-1, selector-2\")\r\n          \toption\t\t\t\t\t\tdefault\r\n          \t-------------------------------------\r\n          \textraDraggableSelectors\t\tnull\r\n          */\n          /*\r\n          extra selectors that'll release scrollbar dragging upon mouseup, pointerup, touchend etc. (e.g. \"selector-1, selector-2\")\r\n          \toption\t\t\t\t\t\tdefault\r\n          \t-------------------------------------\r\n          \treleaseDraggableSelectors\tnull\r\n          */\n          /*\r\n          auto-update timeout \r\n          values: integer (milliseconds)\r\n          */\n          autoUpdateTimeout: 60\n        },\n        /* \r\n        scrollbar theme \r\n        values: string (see CSS/plugin URI for a list of ready-to-use themes)\r\n        */\n        theme: \"light\",\n        /*\r\n        user defined callback functions\r\n        */\n        callbacks: {\n          /*\r\n          Available callbacks: \r\n          \tcallback\t\t\t\t\tdefault\r\n          \t-------------------------------------\r\n          \tonCreate\t\t\t\t\tnull\r\n          \tonInit\t\t\t\t\t\tnull\r\n          \tonScrollStart\t\t\t\tnull\r\n          \tonScroll\t\t\t\t\tnull\r\n          \tonTotalScroll\t\t\t\tnull\r\n          \tonTotalScrollBack\t\t\tnull\r\n          \twhileScrolling\t\t\t\tnull\r\n          \tonOverflowY\t\t\t\t\tnull\r\n          \tonOverflowX\t\t\t\t\tnull\r\n          \tonOverflowYNone\t\t\t\tnull\r\n          \tonOverflowXNone\t\t\t\tnull\r\n          \tonImageLoad\t\t\t\t\tnull\r\n          \tonSelectorChange\t\t\tnull\r\n          \tonBeforeUpdate\t\t\t\tnull\r\n          \tonUpdate\t\t\t\t\tnull\r\n          */\n          onTotalScrollOffset: 0,\n          onTotalScrollBackOffset: 0,\n          alwaysTriggerOffsets: true\n        }\n        /*\r\n        add scrollbar(s) on all elements matching the current selector, now and in the future \r\n        values: boolean, string \r\n        string values: \"on\" (enable), \"once\" (disable after first invocation), \"off\" (disable)\r\n        liveSelector values: string (selector)\r\n        \toption\t\t\t\t\t\tdefault\r\n        \t-------------------------------------\r\n        \tlive\t\t\t\t\t\tfalse\r\n        \tliveSelector\t\t\t\tnull\r\n        */\n      },\n      /* \r\n      ----------------------------------------\r\n      VARS, CONSTANTS \r\n      ----------------------------------------\r\n      */\n\n      totalInstances = 0,\n      /* plugin instances amount */\n      liveTimers = {},\n      /* live option timers */\n      oldIE = window.attachEvent && !window.addEventListener ? 1 : 0,\n      /* detect IE < 9 */\n      touchActive = false,\n      touchable,\n      /* global touch vars (for touch and pointer events) */\n      /* general plugin classes */\n      classes = [\"mCSB_dragger_onDrag\", \"mCSB_scrollTools_onDrag\", \"mCS_img_loaded\", \"mCS_disabled\", \"mCS_destroyed\", \"mCS_no_scrollbar\", \"mCS-autoHide\", \"mCS-dir-rtl\", \"mCS_no_scrollbar_y\", \"mCS_no_scrollbar_x\", \"mCS_y_hidden\", \"mCS_x_hidden\", \"mCSB_draggerContainer\", \"mCSB_buttonUp\", \"mCSB_buttonDown\", \"mCSB_buttonLeft\", \"mCSB_buttonRight\"],\n      /* \r\n      ----------------------------------------\r\n      METHODS \r\n      ----------------------------------------\r\n      */\n\n      methods = {\n        /* \r\n        plugin initialization method \r\n        creates the scrollbar(s), plugin data object and options\r\n        ----------------------------------------\r\n        */\n\n        init: function (options) {\n          var options = $.extend(true, {}, defaults, options),\n            selector = _selector.call(this); /* validate selector */\n\n          /* \r\n          if live option is enabled, monitor for elements matching the current selector and \r\n          apply scrollbar(s) when found (now and in the future) \r\n          */\n          if (options.live) {\n            var liveSelector = options.liveSelector || this.selector || defaultSelector,\n              /* live selector(s) */\n              $liveSelector = $(liveSelector); /* live selector(s) as jquery object */\n            if (options.live === \"off\") {\n              /* \r\n              disable live if requested \r\n              usage: $(selector).mCustomScrollbar({live:\"off\"}); \r\n              */\n              removeLiveTimers(liveSelector);\n              return;\n            }\n            liveTimers[liveSelector] = setTimeout(function () {\n              /* call mCustomScrollbar fn on live selector(s) every half-second */\n              $liveSelector.mCustomScrollbar(options);\n              if (options.live === \"once\" && $liveSelector.length) {\n                /* disable live after first invocation */\n                removeLiveTimers(liveSelector);\n              }\n            }, 500);\n          } else {\n            removeLiveTimers(liveSelector);\n          }\n\n          /* options backward compatibility (for versions < 3.0.0) and normalization */\n          options.setWidth = options.set_width ? options.set_width : options.setWidth;\n          options.setHeight = options.set_height ? options.set_height : options.setHeight;\n          options.axis = options.horizontalScroll ? \"x\" : _findAxis(options.axis);\n          options.scrollInertia = options.scrollInertia > 0 && options.scrollInertia < 17 ? 17 : options.scrollInertia;\n          if (typeof options.mouseWheel !== \"object\" && options.mouseWheel == true) {\n            /* old school mouseWheel option (non-object) */\n            options.mouseWheel = {\n              enable: true,\n              scrollAmount: \"auto\",\n              axis: \"y\",\n              preventDefault: false,\n              deltaFactor: \"auto\",\n              normalizeDelta: false,\n              invert: false\n            };\n          }\n          options.mouseWheel.scrollAmount = !options.mouseWheelPixels ? options.mouseWheel.scrollAmount : options.mouseWheelPixels;\n          options.mouseWheel.normalizeDelta = !options.advanced.normalizeMouseWheelDelta ? options.mouseWheel.normalizeDelta : options.advanced.normalizeMouseWheelDelta;\n          options.scrollButtons.scrollType = _findScrollButtonsType(options.scrollButtons.scrollType);\n          _theme(options); /* theme-specific options */\n\n          /* plugin constructor */\n          return $(selector).each(function () {\n            var $this = $(this);\n            if (!$this.data(pluginPfx)) {\n              /* prevent multiple instantiations */\n\n              /* store options and create objects in jquery data */\n              $this.data(pluginPfx, {\n                idx: ++totalInstances,\n                /* instance index */\n                opt: options,\n                /* options */\n                scrollRatio: {\n                  y: null,\n                  x: null\n                },\n                /* scrollbar to content ratio */\n                overflowed: null,\n                /* overflowed axis */\n                contentReset: {\n                  y: null,\n                  x: null\n                },\n                /* object to check when content resets */\n                bindEvents: false,\n                /* object to check if events are bound */\n                tweenRunning: false,\n                /* object to check if tween is running */\n                sequential: {},\n                /* sequential scrolling object */\n                langDir: $this.css(\"direction\"),\n                /* detect/store direction (ltr or rtl) */\n                cbOffsets: null,\n                /* object to check whether callback offsets always trigger */\n                /* \r\n                object to check how scrolling events where last triggered \r\n                \"internal\" (default - triggered by this script), \"external\" (triggered by other scripts, e.g. via scrollTo method) \r\n                usage: object.data(\"mCS\").trigger\r\n                */\n                trigger: null,\n                /* \r\n                object to check for changes in elements in order to call the update method automatically \r\n                */\n                poll: {\n                  size: {\n                    o: 0,\n                    n: 0\n                  },\n                  img: {\n                    o: 0,\n                    n: 0\n                  },\n                  change: {\n                    o: 0,\n                    n: 0\n                  }\n                }\n              });\n              var d = $this.data(pluginPfx),\n                o = d.opt,\n                /* HTML data attributes */\n                htmlDataAxis = $this.data(\"mcs-axis\"),\n                htmlDataSbPos = $this.data(\"mcs-scrollbar-position\"),\n                htmlDataTheme = $this.data(\"mcs-theme\");\n              if (htmlDataAxis) {\n                o.axis = htmlDataAxis;\n              } /* usage example: data-mcs-axis=\"y\" */\n              if (htmlDataSbPos) {\n                o.scrollbarPosition = htmlDataSbPos;\n              } /* usage example: data-mcs-scrollbar-position=\"outside\" */\n              if (htmlDataTheme) {\n                /* usage example: data-mcs-theme=\"minimal\" */\n                o.theme = htmlDataTheme;\n                _theme(o); /* theme-specific options */\n              }\n\n              _pluginMarkup.call(this); /* add plugin markup */\n\n              if (d && o.callbacks.onCreate && typeof o.callbacks.onCreate === \"function\") {\n                o.callbacks.onCreate.call(this);\n              } /* callbacks: onCreate */\n\n              $(\"#mCSB_\" + d.idx + \"_container img:not(.\" + classes[2] + \")\").addClass(classes[2]); /* flag loaded images */\n\n              methods.update.call(null, $this); /* call the update method */\n            }\n          });\n        },\n\n        /* ---------------------------------------- */\n\n        /* \r\n        plugin update method \r\n        updates content and scrollbar(s) values, events and status \r\n        ----------------------------------------\r\n        usage: $(selector).mCustomScrollbar(\"update\");\r\n        */\n\n        update: function (el, cb) {\n          var selector = el || _selector.call(this); /* validate selector */\n\n          return $(selector).each(function () {\n            var $this = $(this);\n            if ($this.data(pluginPfx)) {\n              /* check if plugin has initialized */\n\n              var d = $this.data(pluginPfx),\n                o = d.opt,\n                mCSB_container = $(\"#mCSB_\" + d.idx + \"_container\"),\n                mCustomScrollBox = $(\"#mCSB_\" + d.idx),\n                mCSB_dragger = [$(\"#mCSB_\" + d.idx + \"_dragger_vertical\"), $(\"#mCSB_\" + d.idx + \"_dragger_horizontal\")];\n              if (!mCSB_container.length) {\n                return;\n              }\n              if (d.tweenRunning) {\n                _stop($this);\n              } /* stop any running tweens while updating */\n\n              if (cb && d && o.callbacks.onBeforeUpdate && typeof o.callbacks.onBeforeUpdate === \"function\") {\n                o.callbacks.onBeforeUpdate.call(this);\n              } /* callbacks: onBeforeUpdate */\n\n              /* if element was disabled or destroyed, remove class(es) */\n              if ($this.hasClass(classes[3])) {\n                $this.removeClass(classes[3]);\n              }\n              if ($this.hasClass(classes[4])) {\n                $this.removeClass(classes[4]);\n              }\n\n              /* css flexbox fix, detect/set max-height */\n              mCustomScrollBox.css(\"max-height\", \"none\");\n              if (mCustomScrollBox.height() !== $this.height()) {\n                mCustomScrollBox.css(\"max-height\", $this.height());\n              }\n              _expandContentHorizontally.call(this); /* expand content horizontally */\n\n              if (o.axis !== \"y\" && !o.advanced.autoExpandHorizontalScroll) {\n                mCSB_container.css(\"width\", _contentWidth(mCSB_container));\n              }\n              d.overflowed = _overflowed.call(this); /* determine if scrolling is required */\n\n              _scrollbarVisibility.call(this); /* show/hide scrollbar(s) */\n\n              /* auto-adjust scrollbar dragger length analogous to content */\n              if (o.autoDraggerLength) {\n                _setDraggerLength.call(this);\n              }\n              _scrollRatio.call(this); /* calculate and store scrollbar to content ratio */\n\n              _bindEvents.call(this); /* bind scrollbar events */\n\n              /* reset scrolling position and/or events */\n              var to = [Math.abs(mCSB_container[0].offsetTop), Math.abs(mCSB_container[0].offsetLeft)];\n              if (o.axis !== \"x\") {\n                /* y/yx axis */\n                if (!d.overflowed[0]) {\n                  /* y scrolling is not required */\n                  _resetContentPosition.call(this); /* reset content position */\n                  if (o.axis === \"y\") {\n                    _unbindEvents.call(this);\n                  } else if (o.axis === \"yx\" && d.overflowed[1]) {\n                    _scrollTo($this, to[1].toString(), {\n                      dir: \"x\",\n                      dur: 0,\n                      overwrite: \"none\"\n                    });\n                  }\n                } else if (mCSB_dragger[0].height() > mCSB_dragger[0].parent().height()) {\n                  _resetContentPosition.call(this); /* reset content position */\n                } else {\n                  /* y scrolling is required */\n                  _scrollTo($this, to[0].toString(), {\n                    dir: \"y\",\n                    dur: 0,\n                    overwrite: \"none\"\n                  });\n                  d.contentReset.y = null;\n                }\n              }\n              if (o.axis !== \"y\") {\n                /* x/yx axis */\n                if (!d.overflowed[1]) {\n                  /* x scrolling is not required */\n                  _resetContentPosition.call(this); /* reset content position */\n                  if (o.axis === \"x\") {\n                    _unbindEvents.call(this);\n                  } else if (o.axis === \"yx\" && d.overflowed[0]) {\n                    _scrollTo($this, to[0].toString(), {\n                      dir: \"y\",\n                      dur: 0,\n                      overwrite: \"none\"\n                    });\n                  }\n                } else if (mCSB_dragger[1].width() > mCSB_dragger[1].parent().width()) {\n                  _resetContentPosition.call(this); /* reset content position */\n                } else {\n                  /* x scrolling is required */\n                  _scrollTo($this, to[1].toString(), {\n                    dir: \"x\",\n                    dur: 0,\n                    overwrite: \"none\"\n                  });\n                  d.contentReset.x = null;\n                }\n              }\n\n              /* callbacks: onImageLoad, onSelectorChange, onUpdate */\n              if (cb && d) {\n                if (cb === 2 && o.callbacks.onImageLoad && typeof o.callbacks.onImageLoad === \"function\") {\n                  o.callbacks.onImageLoad.call(this);\n                } else if (cb === 3 && o.callbacks.onSelectorChange && typeof o.callbacks.onSelectorChange === \"function\") {\n                  o.callbacks.onSelectorChange.call(this);\n                } else if (o.callbacks.onUpdate && typeof o.callbacks.onUpdate === \"function\") {\n                  o.callbacks.onUpdate.call(this);\n                }\n              }\n              _autoUpdate.call(this); /* initialize automatic updating (for dynamic content, fluid layouts etc.) */\n            }\n          });\n        },\n\n        /* ---------------------------------------- */\n\n        /* \r\n        plugin scrollTo method \r\n        triggers a scrolling event to a specific value\r\n        ----------------------------------------\r\n        usage: $(selector).mCustomScrollbar(\"scrollTo\",value,options);\r\n        */\n\n        scrollTo: function (val, options) {\n          /* prevent silly things like $(selector).mCustomScrollbar(\"scrollTo\",undefined); */\n          if (typeof val == \"undefined\" || val == null) {\n            return;\n          }\n          var selector = _selector.call(this); /* validate selector */\n\n          return $(selector).each(function () {\n            var $this = $(this);\n            if ($this.data(pluginPfx)) {\n              /* check if plugin has initialized */\n\n              var d = $this.data(pluginPfx),\n                o = d.opt,\n                /* method default options */\n                methodDefaults = {\n                  trigger: \"external\",\n                  /* method is by default triggered externally (e.g. from other scripts) */\n                  scrollInertia: o.scrollInertia,\n                  /* scrolling inertia (animation duration) */\n                  scrollEasing: \"mcsEaseInOut\",\n                  /* animation easing */\n                  moveDragger: false,\n                  /* move dragger instead of content */\n                  timeout: 60,\n                  /* scroll-to delay */\n                  callbacks: true,\n                  /* enable/disable callbacks */\n                  onStart: true,\n                  onUpdate: true,\n                  onComplete: true\n                },\n                methodOptions = $.extend(true, {}, methodDefaults, options),\n                to = _arr.call(this, val),\n                dur = methodOptions.scrollInertia > 0 && methodOptions.scrollInertia < 17 ? 17 : methodOptions.scrollInertia;\n\n              /* translate yx values to actual scroll-to positions */\n              to[0] = _to.call(this, to[0], \"y\");\n              to[1] = _to.call(this, to[1], \"x\");\n\n              /* \r\n              check if scroll-to value moves the dragger instead of content. \r\n              Only pixel values apply on dragger (e.g. 100, \"100px\", \"-=100\" etc.) \r\n              */\n              if (methodOptions.moveDragger) {\n                to[0] *= d.scrollRatio.y;\n                to[1] *= d.scrollRatio.x;\n              }\n              methodOptions.dur = _isTabHidden() ? 0 : dur; //skip animations if browser tab is hidden\n\n              setTimeout(function () {\n                /* do the scrolling */\n                if (to[0] !== null && typeof to[0] !== \"undefined\" && o.axis !== \"x\" && d.overflowed[0]) {\n                  /* scroll y */\n                  methodOptions.dir = \"y\";\n                  methodOptions.overwrite = \"all\";\n                  _scrollTo($this, to[0].toString(), methodOptions);\n                }\n                if (to[1] !== null && typeof to[1] !== \"undefined\" && o.axis !== \"y\" && d.overflowed[1]) {\n                  /* scroll x */\n                  methodOptions.dir = \"x\";\n                  methodOptions.overwrite = \"none\";\n                  _scrollTo($this, to[1].toString(), methodOptions);\n                }\n              }, methodOptions.timeout);\n            }\n          });\n        },\n        /* ---------------------------------------- */\n\n        /*\r\n        plugin stop method \r\n        stops scrolling animation\r\n        ----------------------------------------\r\n        usage: $(selector).mCustomScrollbar(\"stop\");\r\n        */\n        stop: function () {\n          var selector = _selector.call(this); /* validate selector */\n\n          return $(selector).each(function () {\n            var $this = $(this);\n            if ($this.data(pluginPfx)) {\n              /* check if plugin has initialized */\n\n              _stop($this);\n            }\n          });\n        },\n        /* ---------------------------------------- */\n\n        /*\r\n        plugin disable method \r\n        temporarily disables the scrollbar(s) \r\n        ----------------------------------------\r\n        usage: $(selector).mCustomScrollbar(\"disable\",reset); \r\n        reset (boolean): resets content position to 0 \r\n        */\n        disable: function (r) {\n          var selector = _selector.call(this); /* validate selector */\n\n          return $(selector).each(function () {\n            var $this = $(this);\n            if ($this.data(pluginPfx)) {\n              /* check if plugin has initialized */\n\n              var d = $this.data(pluginPfx);\n              _autoUpdate.call(this, \"remove\"); /* remove automatic updating */\n\n              _unbindEvents.call(this); /* unbind events */\n\n              if (r) {\n                _resetContentPosition.call(this);\n              } /* reset content position */\n\n              _scrollbarVisibility.call(this, true); /* show/hide scrollbar(s) */\n\n              $this.addClass(classes[3]); /* add disable class */\n            }\n          });\n        },\n\n        /* ---------------------------------------- */\n\n        /*\r\n        plugin destroy method \r\n        completely removes the scrollbar(s) and returns the element to its original state\r\n        ----------------------------------------\r\n        usage: $(selector).mCustomScrollbar(\"destroy\"); \r\n        */\n        destroy: function () {\n          var selector = _selector.call(this); /* validate selector */\n\n          return $(selector).each(function () {\n            var $this = $(this);\n            if ($this.data(pluginPfx)) {\n              /* check if plugin has initialized */\n\n              var d = $this.data(pluginPfx),\n                o = d.opt,\n                mCustomScrollBox = $(\"#mCSB_\" + d.idx),\n                mCSB_container = $(\"#mCSB_\" + d.idx + \"_container\"),\n                scrollbar = $(\".mCSB_\" + d.idx + \"_scrollbar\");\n              if (o.live) {\n                removeLiveTimers(o.liveSelector || $(selector).selector);\n              } /* remove live timers */\n\n              _autoUpdate.call(this, \"remove\"); /* remove automatic updating */\n\n              _unbindEvents.call(this); /* unbind events */\n\n              _resetContentPosition.call(this); /* reset content position */\n\n              $this.removeData(pluginPfx); /* remove plugin data object */\n\n              _delete(this, \"mcs\"); /* delete callbacks object */\n\n              /* remove plugin markup */\n              scrollbar.remove(); /* remove scrollbar(s) first (those can be either inside or outside plugin's inner wrapper) */\n              mCSB_container.find(\"img.\" + classes[2]).removeClass(classes[2]); /* remove loaded images flag */\n              mCustomScrollBox.replaceWith(mCSB_container.contents()); /* replace plugin's inner wrapper with the original content */\n              /* remove plugin classes from the element and add destroy class */\n              $this.removeClass(pluginNS + \" _\" + pluginPfx + \"_\" + d.idx + \" \" + classes[6] + \" \" + classes[7] + \" \" + classes[5] + \" \" + classes[3]).addClass(classes[4]);\n            }\n          });\n        }\n        /* ---------------------------------------- */\n      },\n      /* \r\n      ----------------------------------------\r\n      FUNCTIONS\r\n      ----------------------------------------\r\n      */\n\n      /* validates selector (if selector is invalid or undefined uses the default one) */\n      _selector = function () {\n        return typeof $(this) !== \"object\" || $(this).length < 1 ? defaultSelector : this;\n      },\n      /* -------------------- */\n\n      /* changes options according to theme */\n      _theme = function (obj) {\n        var fixedSizeScrollbarThemes = [\"rounded\", \"rounded-dark\", \"rounded-dots\", \"rounded-dots-dark\"],\n          nonExpandedScrollbarThemes = [\"rounded-dots\", \"rounded-dots-dark\", \"3d\", \"3d-dark\", \"3d-thick\", \"3d-thick-dark\", \"inset\", \"inset-dark\", \"inset-2\", \"inset-2-dark\", \"inset-3\", \"inset-3-dark\"],\n          disabledScrollButtonsThemes = [\"minimal\", \"minimal-dark\"],\n          enabledAutoHideScrollbarThemes = [\"minimal\", \"minimal-dark\"],\n          scrollbarPositionOutsideThemes = [\"minimal\", \"minimal-dark\"];\n        obj.autoDraggerLength = $.inArray(obj.theme, fixedSizeScrollbarThemes) > -1 ? false : obj.autoDraggerLength;\n        obj.autoExpandScrollbar = $.inArray(obj.theme, nonExpandedScrollbarThemes) > -1 ? false : obj.autoExpandScrollbar;\n        obj.scrollButtons.enable = $.inArray(obj.theme, disabledScrollButtonsThemes) > -1 ? false : obj.scrollButtons.enable;\n        obj.autoHideScrollbar = $.inArray(obj.theme, enabledAutoHideScrollbarThemes) > -1 ? true : obj.autoHideScrollbar;\n        obj.scrollbarPosition = $.inArray(obj.theme, scrollbarPositionOutsideThemes) > -1 ? \"outside\" : obj.scrollbarPosition;\n      },\n      /* -------------------- */\n\n      /* live option timers removal */\n      removeLiveTimers = function (selector) {\n        if (liveTimers[selector]) {\n          clearTimeout(liveTimers[selector]);\n          _delete(liveTimers, selector);\n        }\n      },\n      /* -------------------- */\n\n      /* normalizes axis option to valid values: \"y\", \"x\", \"yx\" */\n      _findAxis = function (val) {\n        return val === \"yx\" || val === \"xy\" || val === \"auto\" ? \"yx\" : val === \"x\" || val === \"horizontal\" ? \"x\" : \"y\";\n      },\n      /* -------------------- */\n\n      /* normalizes scrollButtons.scrollType option to valid values: \"stepless\", \"stepped\" */\n      _findScrollButtonsType = function (val) {\n        return val === \"stepped\" || val === \"pixels\" || val === \"step\" || val === \"click\" ? \"stepped\" : \"stepless\";\n      },\n      /* -------------------- */\n\n      /* generates plugin markup */\n      _pluginMarkup = function () {\n        var $this = $(this),\n          d = $this.data(pluginPfx),\n          o = d.opt,\n          expandClass = o.autoExpandScrollbar ? \" \" + classes[1] + \"_expand\" : \"\",\n          scrollbar = [\"<div id='mCSB_\" + d.idx + \"_scrollbar_vertical' class='mCSB_scrollTools mCSB_\" + d.idx + \"_scrollbar mCS-\" + o.theme + \" mCSB_scrollTools_vertical\" + expandClass + \"'><div class='\" + classes[12] + \"'><div id='mCSB_\" + d.idx + \"_dragger_vertical' class='mCSB_dragger' style='position:absolute;' oncontextmenu='return false;'><div class='mCSB_dragger_bar' /></div><div class='mCSB_draggerRail' /></div></div>\", \"<div id='mCSB_\" + d.idx + \"_scrollbar_horizontal' class='mCSB_scrollTools mCSB_\" + d.idx + \"_scrollbar mCS-\" + o.theme + \" mCSB_scrollTools_horizontal\" + expandClass + \"'><div class='\" + classes[12] + \"'><div id='mCSB_\" + d.idx + \"_dragger_horizontal' class='mCSB_dragger' style='position:absolute;' oncontextmenu='return false;'><div class='mCSB_dragger_bar' /></div><div class='mCSB_draggerRail' /></div></div>\"],\n          wrapperClass = o.axis === \"yx\" ? \"mCSB_vertical_horizontal\" : o.axis === \"x\" ? \"mCSB_horizontal\" : \"mCSB_vertical\",\n          scrollbars = o.axis === \"yx\" ? scrollbar[0] + scrollbar[1] : o.axis === \"x\" ? scrollbar[1] : scrollbar[0],\n          contentWrapper = o.axis === \"yx\" ? \"<div id='mCSB_\" + d.idx + \"_container_wrapper' class='mCSB_container_wrapper' />\" : \"\",\n          autoHideClass = o.autoHideScrollbar ? \" \" + classes[6] : \"\",\n          scrollbarDirClass = o.axis !== \"x\" && d.langDir === \"rtl\" ? \" \" + classes[7] : \"\";\n        if (o.setWidth) {\n          $this.css(\"width\", o.setWidth);\n        } /* set element width */\n        if (o.setHeight) {\n          $this.css(\"height\", o.setHeight);\n        } /* set element height */\n        o.setLeft = o.axis !== \"y\" && d.langDir === \"rtl\" ? \"989999px\" : o.setLeft; /* adjust left position for rtl direction */\n        $this.addClass(pluginNS + \" _\" + pluginPfx + \"_\" + d.idx + autoHideClass + scrollbarDirClass).wrapInner(\"<div id='mCSB_\" + d.idx + \"' class='mCustomScrollBox mCS-\" + o.theme + \" \" + wrapperClass + \"'><div id='mCSB_\" + d.idx + \"_container' class='mCSB_container' style='position:relative; top:\" + o.setTop + \"; left:\" + o.setLeft + \";' dir=\" + d.langDir + \" /></div>\");\n        var mCustomScrollBox = $(\"#mCSB_\" + d.idx),\n          mCSB_container = $(\"#mCSB_\" + d.idx + \"_container\");\n        if (o.axis !== \"y\" && !o.advanced.autoExpandHorizontalScroll) {\n          mCSB_container.css(\"width\", _contentWidth(mCSB_container));\n        }\n        if (o.scrollbarPosition === \"outside\") {\n          if ($this.css(\"position\") === \"static\") {\n            /* requires elements with non-static position */\n            $this.css(\"position\", \"relative\");\n          }\n          $this.css(\"overflow\", \"visible\");\n          mCustomScrollBox.addClass(\"mCSB_outside\").after(scrollbars);\n        } else {\n          mCustomScrollBox.addClass(\"mCSB_inside\").append(scrollbars);\n          mCSB_container.wrap(contentWrapper);\n        }\n        _scrollButtons.call(this); /* add scrollbar buttons */\n        /* minimum dragger length */\n        var mCSB_dragger = [$(\"#mCSB_\" + d.idx + \"_dragger_vertical\"), $(\"#mCSB_\" + d.idx + \"_dragger_horizontal\")];\n        mCSB_dragger[0].css(\"min-height\", mCSB_dragger[0].height());\n        mCSB_dragger[1].css(\"min-width\", mCSB_dragger[1].width());\n      },\n      /* -------------------- */\n\n      /* calculates content width */\n      _contentWidth = function (el) {\n        var val = [el[0].scrollWidth, Math.max.apply(Math, el.children().map(function () {\n            return $(this).outerWidth(true);\n          }).get())],\n          w = el.parent().width();\n        return val[0] > w ? val[0] : val[1] > w ? val[1] : \"100%\";\n      },\n      /* -------------------- */\n\n      /* expands content horizontally */\n      _expandContentHorizontally = function () {\n        var $this = $(this),\n          d = $this.data(pluginPfx),\n          o = d.opt,\n          mCSB_container = $(\"#mCSB_\" + d.idx + \"_container\");\n        if (o.advanced.autoExpandHorizontalScroll && o.axis !== \"y\") {\n          /* calculate scrollWidth */\n          mCSB_container.css({\n            \"width\": \"auto\",\n            \"min-width\": 0,\n            \"overflow-x\": \"scroll\"\n          });\n          var w = Math.ceil(mCSB_container[0].scrollWidth);\n          if (o.advanced.autoExpandHorizontalScroll === 3 || o.advanced.autoExpandHorizontalScroll !== 2 && w > mCSB_container.parent().width()) {\n            mCSB_container.css({\n              \"width\": w,\n              \"min-width\": \"100%\",\n              \"overflow-x\": \"inherit\"\n            });\n          } else {\n            /* \r\n            wrap content with an infinite width div and set its position to absolute and width to auto. \r\n            Setting width to auto before calculating the actual width is important! \r\n            We must let the browser set the width as browser zoom values are impossible to calculate.\r\n            */\n            mCSB_container.css({\n              \"overflow-x\": \"inherit\",\n              \"position\": \"absolute\"\n            }).wrap(\"<div class='mCSB_h_wrapper' style='position:relative; left:0; width:999999px;' />\").css({\n              /* set actual width, original position and un-wrap */\n              /* \r\n              get the exact width (with decimals) and then round-up. \r\n              Using jquery outerWidth() will round the width value which will mess up with inner elements that have non-integer width\r\n              */\n              \"width\": Math.ceil(mCSB_container[0].getBoundingClientRect().right + 0.4) - Math.floor(mCSB_container[0].getBoundingClientRect().left),\n              \"min-width\": \"100%\",\n              \"position\": \"relative\"\n            }).unwrap();\n          }\n        }\n      },\n      /* -------------------- */\n\n      /* adds scrollbar buttons */\n      _scrollButtons = function () {\n        var $this = $(this),\n          d = $this.data(pluginPfx),\n          o = d.opt,\n          mCSB_scrollTools = $(\".mCSB_\" + d.idx + \"_scrollbar:first\"),\n          tabindex = !_isNumeric(o.scrollButtons.tabindex) ? \"\" : \"tabindex='\" + o.scrollButtons.tabindex + \"'\",\n          btnHTML = [\"<a href='#' class='\" + classes[13] + \"' oncontextmenu='return false;' \" + tabindex + \" />\", \"<a href='#' class='\" + classes[14] + \"' oncontextmenu='return false;' \" + tabindex + \" />\", \"<a href='#' class='\" + classes[15] + \"' oncontextmenu='return false;' \" + tabindex + \" />\", \"<a href='#' class='\" + classes[16] + \"' oncontextmenu='return false;' \" + tabindex + \" />\"],\n          btn = [o.axis === \"x\" ? btnHTML[2] : btnHTML[0], o.axis === \"x\" ? btnHTML[3] : btnHTML[1], btnHTML[2], btnHTML[3]];\n        if (o.scrollButtons.enable) {\n          mCSB_scrollTools.prepend(btn[0]).append(btn[1]).next(\".mCSB_scrollTools\").prepend(btn[2]).append(btn[3]);\n        }\n      },\n      /* -------------------- */\n\n      /* auto-adjusts scrollbar dragger length */\n      _setDraggerLength = function () {\n        var $this = $(this),\n          d = $this.data(pluginPfx),\n          mCustomScrollBox = $(\"#mCSB_\" + d.idx),\n          mCSB_container = $(\"#mCSB_\" + d.idx + \"_container\"),\n          mCSB_dragger = [$(\"#mCSB_\" + d.idx + \"_dragger_vertical\"), $(\"#mCSB_\" + d.idx + \"_dragger_horizontal\")],\n          ratio = [mCustomScrollBox.height() / mCSB_container.outerHeight(false), mCustomScrollBox.width() / mCSB_container.outerWidth(false)],\n          l = [parseInt(mCSB_dragger[0].css(\"min-height\")), Math.round(ratio[0] * mCSB_dragger[0].parent().height()), parseInt(mCSB_dragger[1].css(\"min-width\")), Math.round(ratio[1] * mCSB_dragger[1].parent().width())],\n          h = oldIE && l[1] < l[0] ? l[0] : l[1],\n          w = oldIE && l[3] < l[2] ? l[2] : l[3];\n        mCSB_dragger[0].css({\n          \"height\": h,\n          \"max-height\": mCSB_dragger[0].parent().height() - 10\n        }).find(\".mCSB_dragger_bar\").css({\n          \"line-height\": l[0] + \"px\"\n        });\n        mCSB_dragger[1].css({\n          \"width\": w,\n          \"max-width\": mCSB_dragger[1].parent().width() - 10\n        });\n      },\n      /* -------------------- */\n\n      /* calculates scrollbar to content ratio */\n      _scrollRatio = function () {\n        var $this = $(this),\n          d = $this.data(pluginPfx),\n          mCustomScrollBox = $(\"#mCSB_\" + d.idx),\n          mCSB_container = $(\"#mCSB_\" + d.idx + \"_container\"),\n          mCSB_dragger = [$(\"#mCSB_\" + d.idx + \"_dragger_vertical\"), $(\"#mCSB_\" + d.idx + \"_dragger_horizontal\")],\n          scrollAmount = [mCSB_container.outerHeight(false) - mCustomScrollBox.height(), mCSB_container.outerWidth(false) - mCustomScrollBox.width()],\n          ratio = [scrollAmount[0] / (mCSB_dragger[0].parent().height() - mCSB_dragger[0].height()), scrollAmount[1] / (mCSB_dragger[1].parent().width() - mCSB_dragger[1].width())];\n        d.scrollRatio = {\n          y: ratio[0],\n          x: ratio[1]\n        };\n      },\n      /* -------------------- */\n\n      /* toggles scrolling classes */\n      _onDragClasses = function (el, action, xpnd) {\n        var expandClass = xpnd ? classes[0] + \"_expanded\" : \"\",\n          scrollbar = el.closest(\".mCSB_scrollTools\");\n        if (action === \"active\") {\n          el.toggleClass(classes[0] + \" \" + expandClass);\n          scrollbar.toggleClass(classes[1]);\n          el[0]._draggable = el[0]._draggable ? 0 : 1;\n        } else {\n          if (!el[0]._draggable) {\n            if (action === \"hide\") {\n              el.removeClass(classes[0]);\n              scrollbar.removeClass(classes[1]);\n            } else {\n              el.addClass(classes[0]);\n              scrollbar.addClass(classes[1]);\n            }\n          }\n        }\n      },\n      /* -------------------- */\n\n      /* checks if content overflows its container to determine if scrolling is required */\n      _overflowed = function () {\n        var $this = $(this),\n          d = $this.data(pluginPfx),\n          mCustomScrollBox = $(\"#mCSB_\" + d.idx),\n          mCSB_container = $(\"#mCSB_\" + d.idx + \"_container\"),\n          contentHeight = d.overflowed == null ? mCSB_container.height() : mCSB_container.outerHeight(false),\n          contentWidth = d.overflowed == null ? mCSB_container.width() : mCSB_container.outerWidth(false),\n          h = mCSB_container[0].scrollHeight,\n          w = mCSB_container[0].scrollWidth;\n        if (h > contentHeight) {\n          contentHeight = h;\n        }\n        if (w > contentWidth) {\n          contentWidth = w;\n        }\n        return [contentHeight > mCustomScrollBox.height(), contentWidth > mCustomScrollBox.width()];\n      },\n      /* -------------------- */\n\n      /* resets content position to 0 */\n      _resetContentPosition = function () {\n        var $this = $(this),\n          d = $this.data(pluginPfx),\n          o = d.opt,\n          mCustomScrollBox = $(\"#mCSB_\" + d.idx),\n          mCSB_container = $(\"#mCSB_\" + d.idx + \"_container\"),\n          mCSB_dragger = [$(\"#mCSB_\" + d.idx + \"_dragger_vertical\"), $(\"#mCSB_\" + d.idx + \"_dragger_horizontal\")];\n        _stop($this); /* stop any current scrolling before resetting */\n        if (o.axis !== \"x\" && !d.overflowed[0] || o.axis === \"y\" && d.overflowed[0]) {\n          /* reset y */\n          mCSB_dragger[0].add(mCSB_container).css(\"top\", 0);\n          _scrollTo($this, \"_resetY\");\n        }\n        if (o.axis !== \"y\" && !d.overflowed[1] || o.axis === \"x\" && d.overflowed[1]) {\n          /* reset x */\n          var cx = dx = 0;\n          if (d.langDir === \"rtl\") {\n            /* adjust left position for rtl direction */\n            cx = mCustomScrollBox.width() - mCSB_container.outerWidth(false);\n            dx = Math.abs(cx / d.scrollRatio.x);\n          }\n          mCSB_container.css(\"left\", cx);\n          mCSB_dragger[1].css(\"left\", dx);\n          _scrollTo($this, \"_resetX\");\n        }\n      },\n      /* -------------------- */\n\n      /* binds scrollbar events */\n      _bindEvents = function () {\n        var $this = $(this),\n          d = $this.data(pluginPfx),\n          o = d.opt;\n        if (!d.bindEvents) {\n          /* check if events are already bound */\n          _draggable.call(this);\n          if (o.contentTouchScroll) {\n            _contentDraggable.call(this);\n          }\n          _selectable.call(this);\n          if (o.mouseWheel.enable) {\n            /* bind mousewheel fn when plugin is available */\n            function _mwt() {\n              mousewheelTimeout = setTimeout(function () {\n                if (!$.event.special.mousewheel) {\n                  _mwt();\n                } else {\n                  clearTimeout(mousewheelTimeout);\n                  _mousewheel.call($this[0]);\n                }\n              }, 100);\n            }\n            var mousewheelTimeout;\n            _mwt();\n          }\n          _draggerRail.call(this);\n          _wrapperScroll.call(this);\n          if (o.advanced.autoScrollOnFocus) {\n            _focus.call(this);\n          }\n          if (o.scrollButtons.enable) {\n            _buttons.call(this);\n          }\n          if (o.keyboard.enable) {\n            _keyboard.call(this);\n          }\n          d.bindEvents = true;\n        }\n      },\n      /* -------------------- */\n\n      /* unbinds scrollbar events */\n      _unbindEvents = function () {\n        var $this = $(this),\n          d = $this.data(pluginPfx),\n          o = d.opt,\n          namespace = pluginPfx + \"_\" + d.idx,\n          sb = \".mCSB_\" + d.idx + \"_scrollbar\",\n          sel = $(\"#mCSB_\" + d.idx + \",#mCSB_\" + d.idx + \"_container,#mCSB_\" + d.idx + \"_container_wrapper,\" + sb + \" .\" + classes[12] + \",#mCSB_\" + d.idx + \"_dragger_vertical,#mCSB_\" + d.idx + \"_dragger_horizontal,\" + sb + \">a\"),\n          mCSB_container = $(\"#mCSB_\" + d.idx + \"_container\");\n        if (o.advanced.releaseDraggableSelectors) {\n          sel.add($(o.advanced.releaseDraggableSelectors));\n        }\n        if (o.advanced.extraDraggableSelectors) {\n          sel.add($(o.advanced.extraDraggableSelectors));\n        }\n        if (d.bindEvents) {\n          /* check if events are bound */\n          /* unbind namespaced events from document/selectors */\n          $(document).add($(!_canAccessIFrame() || top.document)).unbind(\".\" + namespace);\n          sel.each(function () {\n            $(this).unbind(\".\" + namespace);\n          });\n          /* clear and delete timeouts/objects */\n          clearTimeout($this[0]._focusTimeout);\n          _delete($this[0], \"_focusTimeout\");\n          clearTimeout(d.sequential.step);\n          _delete(d.sequential, \"step\");\n          clearTimeout(mCSB_container[0].onCompleteTimeout);\n          _delete(mCSB_container[0], \"onCompleteTimeout\");\n          d.bindEvents = false;\n        }\n      },\n      /* -------------------- */\n\n      /* toggles scrollbar visibility */\n      _scrollbarVisibility = function (disabled) {\n        var $this = $(this),\n          d = $this.data(pluginPfx),\n          o = d.opt,\n          contentWrapper = $(\"#mCSB_\" + d.idx + \"_container_wrapper\"),\n          content = contentWrapper.length ? contentWrapper : $(\"#mCSB_\" + d.idx + \"_container\"),\n          scrollbar = [$(\"#mCSB_\" + d.idx + \"_scrollbar_vertical\"), $(\"#mCSB_\" + d.idx + \"_scrollbar_horizontal\")],\n          mCSB_dragger = [scrollbar[0].find(\".mCSB_dragger\"), scrollbar[1].find(\".mCSB_dragger\")];\n        if (o.axis !== \"x\") {\n          if (d.overflowed[0] && !disabled) {\n            scrollbar[0].add(mCSB_dragger[0]).add(scrollbar[0].children(\"a\")).css(\"display\", \"block\");\n            content.removeClass(classes[8] + \" \" + classes[10]);\n          } else {\n            if (o.alwaysShowScrollbar) {\n              if (o.alwaysShowScrollbar !== 2) {\n                mCSB_dragger[0].css(\"display\", \"none\");\n              }\n              content.removeClass(classes[10]);\n            } else {\n              scrollbar[0].css(\"display\", \"none\");\n              content.addClass(classes[10]);\n            }\n            content.addClass(classes[8]);\n          }\n        }\n        if (o.axis !== \"y\") {\n          if (d.overflowed[1] && !disabled) {\n            scrollbar[1].add(mCSB_dragger[1]).add(scrollbar[1].children(\"a\")).css(\"display\", \"block\");\n            content.removeClass(classes[9] + \" \" + classes[11]);\n          } else {\n            if (o.alwaysShowScrollbar) {\n              if (o.alwaysShowScrollbar !== 2) {\n                mCSB_dragger[1].css(\"display\", \"none\");\n              }\n              content.removeClass(classes[11]);\n            } else {\n              scrollbar[1].css(\"display\", \"none\");\n              content.addClass(classes[11]);\n            }\n            content.addClass(classes[9]);\n          }\n        }\n        if (!d.overflowed[0] && !d.overflowed[1]) {\n          $this.addClass(classes[5]);\n        } else {\n          $this.removeClass(classes[5]);\n        }\n      },\n      /* -------------------- */\n\n      /* returns input coordinates of pointer, touch and mouse events (relative to document) */\n      _coordinates = function (e) {\n        var t = e.type,\n          o = e.target.ownerDocument !== document ? [$(frameElement).offset().top, $(frameElement).offset().left] : null,\n          io = _canAccessIFrame() && e.target.ownerDocument !== top.document ? [$(e.view.frameElement).offset().top, $(e.view.frameElement).offset().left] : [0, 0];\n        switch (t) {\n          case \"pointerdown\":\n          case \"MSPointerDown\":\n          case \"pointermove\":\n          case \"MSPointerMove\":\n          case \"pointerup\":\n          case \"MSPointerUp\":\n            return o ? [e.originalEvent.pageY - o[0] + io[0], e.originalEvent.pageX - o[1] + io[1], false] : [e.originalEvent.pageY, e.originalEvent.pageX, false];\n            break;\n          case \"touchstart\":\n          case \"touchmove\":\n          case \"touchend\":\n            var touch = e.originalEvent.touches[0] || e.originalEvent.changedTouches[0],\n              touches = e.originalEvent.touches.length || e.originalEvent.changedTouches.length;\n            return e.target.ownerDocument !== document ? [touch.screenY, touch.screenX, touches > 1] : [touch.pageY, touch.pageX, touches > 1];\n            break;\n          default:\n            return o ? [e.pageY - o[0] + io[0], e.pageX - o[1] + io[1], false] : [e.pageY, e.pageX, false];\n        }\n      },\n      /* -------------------- */\n\n      /* \r\n      SCROLLBAR DRAG EVENTS\r\n      scrolls content via scrollbar dragging \r\n      */\n      _draggable = function () {\n        var $this = $(this),\n          d = $this.data(pluginPfx),\n          o = d.opt,\n          namespace = pluginPfx + \"_\" + d.idx,\n          draggerId = [\"mCSB_\" + d.idx + \"_dragger_vertical\", \"mCSB_\" + d.idx + \"_dragger_horizontal\"],\n          mCSB_container = $(\"#mCSB_\" + d.idx + \"_container\"),\n          mCSB_dragger = $(\"#\" + draggerId[0] + \",#\" + draggerId[1]),\n          draggable,\n          dragY,\n          dragX,\n          rds = o.advanced.releaseDraggableSelectors ? mCSB_dragger.add($(o.advanced.releaseDraggableSelectors)) : mCSB_dragger,\n          eds = o.advanced.extraDraggableSelectors ? $(!_canAccessIFrame() || top.document).add($(o.advanced.extraDraggableSelectors)) : $(!_canAccessIFrame() || top.document);\n        mCSB_dragger.bind(\"mousedown.\" + namespace + \" touchstart.\" + namespace + \" pointerdown.\" + namespace + \" MSPointerDown.\" + namespace, function (e) {\n          e.stopImmediatePropagation();\n          e.preventDefault();\n          if (!_mouseBtnLeft(e)) {\n            return;\n          } /* left mouse button only */\n          touchActive = true;\n          if (oldIE) {\n            document.onselectstart = function () {\n              return false;\n            };\n          } /* disable text selection for IE < 9 */\n          _iframe(false); /* enable scrollbar dragging over iframes by disabling their events */\n          _stop($this);\n          draggable = $(this);\n          var offset = draggable.offset(),\n            y = _coordinates(e)[0] - offset.top,\n            x = _coordinates(e)[1] - offset.left,\n            h = draggable.height() + offset.top,\n            w = draggable.width() + offset.left;\n          if (y < h && y > 0 && x < w && x > 0) {\n            dragY = y;\n            dragX = x;\n          }\n          _onDragClasses(draggable, \"active\", o.autoExpandScrollbar);\n        }).bind(\"touchmove.\" + namespace, function (e) {\n          e.stopImmediatePropagation();\n          e.preventDefault();\n          var offset = draggable.offset(),\n            y = _coordinates(e)[0] - offset.top,\n            x = _coordinates(e)[1] - offset.left;\n          _drag(dragY, dragX, y, x);\n        });\n        $(document).add(eds).bind(\"mousemove.\" + namespace + \" pointermove.\" + namespace + \" MSPointerMove.\" + namespace, function (e) {\n          if (draggable) {\n            var offset = draggable.offset(),\n              y = _coordinates(e)[0] - offset.top,\n              x = _coordinates(e)[1] - offset.left;\n            if (dragY === y && dragX === x) {\n              return;\n            } /* has it really moved? */\n            _drag(dragY, dragX, y, x);\n          }\n        }).add(rds).bind(\"mouseup.\" + namespace + \" touchend.\" + namespace + \" pointerup.\" + namespace + \" MSPointerUp.\" + namespace, function (e) {\n          if (draggable) {\n            _onDragClasses(draggable, \"active\", o.autoExpandScrollbar);\n            draggable = null;\n          }\n          touchActive = false;\n          if (oldIE) {\n            document.onselectstart = null;\n          } /* enable text selection for IE < 9 */\n          _iframe(true); /* enable iframes events */\n        });\n\n        function _iframe(evt) {\n          var el = mCSB_container.find(\"iframe\");\n          if (!el.length) {\n            return;\n          } /* check if content contains iframes */\n          var val = !evt ? \"none\" : \"auto\";\n          el.css(\"pointer-events\", val); /* for IE11, iframe's display property should not be \"block\" */\n        }\n\n        function _drag(dragY, dragX, y, x) {\n          mCSB_container[0].idleTimer = o.scrollInertia < 233 ? 250 : 0;\n          if (draggable.attr(\"id\") === draggerId[1]) {\n            var dir = \"x\",\n              to = (draggable[0].offsetLeft - dragX + x) * d.scrollRatio.x;\n          } else {\n            var dir = \"y\",\n              to = (draggable[0].offsetTop - dragY + y) * d.scrollRatio.y;\n          }\n          _scrollTo($this, to.toString(), {\n            dir: dir,\n            drag: true\n          });\n        }\n      },\n      /* -------------------- */\n\n      /* \r\n      TOUCH SWIPE EVENTS\r\n      scrolls content via touch swipe \r\n      Emulates the native touch-swipe scrolling with momentum found in iOS, Android and WP devices \r\n      */\n      _contentDraggable = function () {\n        var $this = $(this),\n          d = $this.data(pluginPfx),\n          o = d.opt,\n          namespace = pluginPfx + \"_\" + d.idx,\n          mCustomScrollBox = $(\"#mCSB_\" + d.idx),\n          mCSB_container = $(\"#mCSB_\" + d.idx + \"_container\"),\n          mCSB_dragger = [$(\"#mCSB_\" + d.idx + \"_dragger_vertical\"), $(\"#mCSB_\" + d.idx + \"_dragger_horizontal\")],\n          draggable,\n          dragY,\n          dragX,\n          touchStartY,\n          touchStartX,\n          touchMoveY = [],\n          touchMoveX = [],\n          startTime,\n          runningTime,\n          endTime,\n          distance,\n          speed,\n          amount,\n          durA = 0,\n          durB,\n          overwrite = o.axis === \"yx\" ? \"none\" : \"all\",\n          touchIntent = [],\n          touchDrag,\n          docDrag,\n          iframe = mCSB_container.find(\"iframe\"),\n          events = [\"touchstart.\" + namespace + \" pointerdown.\" + namespace + \" MSPointerDown.\" + namespace,\n          //start\n          \"touchmove.\" + namespace + \" pointermove.\" + namespace + \" MSPointerMove.\" + namespace,\n          //move\n          \"touchend.\" + namespace + \" pointerup.\" + namespace + \" MSPointerUp.\" + namespace //end\n          ],\n          touchAction = document.body.style.touchAction !== undefined;\n        mCSB_container.bind(events[0], function (e) {\n          _onTouchstart(e);\n        }).bind(events[1], function (e) {\n          _onTouchmove(e);\n        });\n        mCustomScrollBox.bind(events[0], function (e) {\n          _onTouchstart2(e);\n        }).bind(events[2], function (e) {\n          _onTouchend(e);\n        });\n        if (iframe.length) {\n          iframe.each(function () {\n            $(this).load(function () {\n              /* bind events on accessible iframes */\n              if (_canAccessIFrame(this)) {\n                $(this.contentDocument || this.contentWindow.document).bind(events[0], function (e) {\n                  _onTouchstart(e);\n                  _onTouchstart2(e);\n                }).bind(events[1], function (e) {\n                  _onTouchmove(e);\n                }).bind(events[2], function (e) {\n                  _onTouchend(e);\n                });\n              }\n            });\n          });\n        }\n        function _onTouchstart(e) {\n          if (!_pointerTouch(e) || touchActive || _coordinates(e)[2]) {\n            touchable = 0;\n            return;\n          }\n          touchable = 1;\n          touchDrag = 0;\n          docDrag = 0;\n          draggable = 1;\n          $this.removeClass(\"mCS_touch_action\");\n          var offset = mCSB_container.offset();\n          dragY = _coordinates(e)[0] - offset.top;\n          dragX = _coordinates(e)[1] - offset.left;\n          touchIntent = [_coordinates(e)[0], _coordinates(e)[1]];\n        }\n        function _onTouchmove(e) {\n          if (!_pointerTouch(e) || touchActive || _coordinates(e)[2]) {\n            return;\n          }\n          if (!o.documentTouchScroll) {\n            e.preventDefault();\n          }\n          e.stopImmediatePropagation();\n          if (docDrag && !touchDrag) {\n            return;\n          }\n          if (draggable) {\n            runningTime = _getTime();\n            var offset = mCustomScrollBox.offset(),\n              y = _coordinates(e)[0] - offset.top,\n              x = _coordinates(e)[1] - offset.left,\n              easing = \"mcsLinearOut\";\n            touchMoveY.push(y);\n            touchMoveX.push(x);\n            touchIntent[2] = Math.abs(_coordinates(e)[0] - touchIntent[0]);\n            touchIntent[3] = Math.abs(_coordinates(e)[1] - touchIntent[1]);\n            if (d.overflowed[0]) {\n              var limit = mCSB_dragger[0].parent().height() - mCSB_dragger[0].height(),\n                prevent = dragY - y > 0 && y - dragY > -(limit * d.scrollRatio.y) && (touchIntent[3] * 2 < touchIntent[2] || o.axis === \"yx\");\n            }\n            if (d.overflowed[1]) {\n              var limitX = mCSB_dragger[1].parent().width() - mCSB_dragger[1].width(),\n                preventX = dragX - x > 0 && x - dragX > -(limitX * d.scrollRatio.x) && (touchIntent[2] * 2 < touchIntent[3] || o.axis === \"yx\");\n            }\n            if (prevent || preventX) {\n              /* prevent native document scrolling */\n              if (!touchAction) {\n                e.preventDefault();\n              }\n              touchDrag = 1;\n            } else {\n              docDrag = 1;\n              $this.addClass(\"mCS_touch_action\");\n            }\n            if (touchAction) {\n              e.preventDefault();\n            }\n            amount = o.axis === \"yx\" ? [dragY - y, dragX - x] : o.axis === \"x\" ? [null, dragX - x] : [dragY - y, null];\n            mCSB_container[0].idleTimer = 250;\n            if (d.overflowed[0]) {\n              _drag(amount[0], durA, easing, \"y\", \"all\", true);\n            }\n            if (d.overflowed[1]) {\n              _drag(amount[1], durA, easing, \"x\", overwrite, true);\n            }\n          }\n        }\n        function _onTouchstart2(e) {\n          if (!_pointerTouch(e) || touchActive || _coordinates(e)[2]) {\n            touchable = 0;\n            return;\n          }\n          touchable = 1;\n          e.stopImmediatePropagation();\n          _stop($this);\n          startTime = _getTime();\n          var offset = mCustomScrollBox.offset();\n          touchStartY = _coordinates(e)[0] - offset.top;\n          touchStartX = _coordinates(e)[1] - offset.left;\n          touchMoveY = [];\n          touchMoveX = [];\n        }\n        function _onTouchend(e) {\n          if (!_pointerTouch(e) || touchActive || _coordinates(e)[2]) {\n            return;\n          }\n          draggable = 0;\n          e.stopImmediatePropagation();\n          touchDrag = 0;\n          docDrag = 0;\n          endTime = _getTime();\n          var offset = mCustomScrollBox.offset(),\n            y = _coordinates(e)[0] - offset.top,\n            x = _coordinates(e)[1] - offset.left;\n          if (endTime - runningTime > 30) {\n            return;\n          }\n          speed = 1000 / (endTime - startTime);\n          var easing = \"mcsEaseOut\",\n            slow = speed < 2.5,\n            diff = slow ? [touchMoveY[touchMoveY.length - 2], touchMoveX[touchMoveX.length - 2]] : [0, 0];\n          distance = slow ? [y - diff[0], x - diff[1]] : [y - touchStartY, x - touchStartX];\n          var absDistance = [Math.abs(distance[0]), Math.abs(distance[1])];\n          speed = slow ? [Math.abs(distance[0] / 4), Math.abs(distance[1] / 4)] : [speed, speed];\n          var a = [Math.abs(mCSB_container[0].offsetTop) - distance[0] * _m(absDistance[0] / speed[0], speed[0]), Math.abs(mCSB_container[0].offsetLeft) - distance[1] * _m(absDistance[1] / speed[1], speed[1])];\n          amount = o.axis === \"yx\" ? [a[0], a[1]] : o.axis === \"x\" ? [null, a[1]] : [a[0], null];\n          durB = [absDistance[0] * 4 + o.scrollInertia, absDistance[1] * 4 + o.scrollInertia];\n          var md = parseInt(o.contentTouchScroll) || 0; /* absolute minimum distance required */\n          amount[0] = absDistance[0] > md ? amount[0] : 0;\n          amount[1] = absDistance[1] > md ? amount[1] : 0;\n          if (d.overflowed[0]) {\n            _drag(amount[0], durB[0], easing, \"y\", overwrite, false);\n          }\n          if (d.overflowed[1]) {\n            _drag(amount[1], durB[1], easing, \"x\", overwrite, false);\n          }\n        }\n        function _m(ds, s) {\n          var r = [s * 1.5, s * 2, s / 1.5, s / 2];\n          if (ds > 90) {\n            return s > 4 ? r[0] : r[3];\n          } else if (ds > 60) {\n            return s > 3 ? r[3] : r[2];\n          } else if (ds > 30) {\n            return s > 8 ? r[1] : s > 6 ? r[0] : s > 4 ? s : r[2];\n          } else {\n            return s > 8 ? s : r[3];\n          }\n        }\n        function _drag(amount, dur, easing, dir, overwrite, drag) {\n          if (!amount) {\n            return;\n          }\n          _scrollTo($this, amount.toString(), {\n            dur: dur,\n            scrollEasing: easing,\n            dir: dir,\n            overwrite: overwrite,\n            drag: drag\n          });\n        }\n      },\n      /* -------------------- */\n\n      /* \r\n      SELECT TEXT EVENTS \r\n      scrolls content when text is selected \r\n      */\n      _selectable = function () {\n        var $this = $(this),\n          d = $this.data(pluginPfx),\n          o = d.opt,\n          seq = d.sequential,\n          namespace = pluginPfx + \"_\" + d.idx,\n          mCSB_container = $(\"#mCSB_\" + d.idx + \"_container\"),\n          wrapper = mCSB_container.parent(),\n          action;\n        mCSB_container.bind(\"mousedown.\" + namespace, function (e) {\n          if (touchable) {\n            return;\n          }\n          if (!action) {\n            action = 1;\n            touchActive = true;\n          }\n        }).add(document).bind(\"mousemove.\" + namespace, function (e) {\n          if (!touchable && action && _sel()) {\n            var offset = mCSB_container.offset(),\n              y = _coordinates(e)[0] - offset.top + mCSB_container[0].offsetTop,\n              x = _coordinates(e)[1] - offset.left + mCSB_container[0].offsetLeft;\n            if (y > 0 && y < wrapper.height() && x > 0 && x < wrapper.width()) {\n              if (seq.step) {\n                _seq(\"off\", null, \"stepped\");\n              }\n            } else {\n              if (o.axis !== \"x\" && d.overflowed[0]) {\n                if (y < 0) {\n                  _seq(\"on\", 38);\n                } else if (y > wrapper.height()) {\n                  _seq(\"on\", 40);\n                }\n              }\n              if (o.axis !== \"y\" && d.overflowed[1]) {\n                if (x < 0) {\n                  _seq(\"on\", 37);\n                } else if (x > wrapper.width()) {\n                  _seq(\"on\", 39);\n                }\n              }\n            }\n          }\n        }).bind(\"mouseup.\" + namespace + \" dragend.\" + namespace, function (e) {\n          if (touchable) {\n            return;\n          }\n          if (action) {\n            action = 0;\n            _seq(\"off\", null);\n          }\n          touchActive = false;\n        });\n        function _sel() {\n          return window.getSelection ? window.getSelection().toString() : document.selection && document.selection.type != \"Control\" ? document.selection.createRange().text : 0;\n        }\n        function _seq(a, c, s) {\n          seq.type = s && action ? \"stepped\" : \"stepless\";\n          seq.scrollAmount = 10;\n          _sequentialScroll($this, a, c, \"mcsLinearOut\", s ? 60 : null);\n        }\n      },\n      /* -------------------- */\n\n      /* \r\n      MOUSE WHEEL EVENT\r\n      scrolls content via mouse-wheel \r\n      via mouse-wheel plugin (https://github.com/brandonaaron/jquery-mousewheel)\r\n      */\n      _mousewheel = function () {\n        if (!$(this).data(pluginPfx)) {\n          return;\n        } /* Check if the scrollbar is ready to use mousewheel events (issue: #185) */\n        var $this = $(this),\n          d = $this.data(pluginPfx),\n          o = d.opt,\n          namespace = pluginPfx + \"_\" + d.idx,\n          mCustomScrollBox = $(\"#mCSB_\" + d.idx),\n          mCSB_dragger = [$(\"#mCSB_\" + d.idx + \"_dragger_vertical\"), $(\"#mCSB_\" + d.idx + \"_dragger_horizontal\")],\n          iframe = $(\"#mCSB_\" + d.idx + \"_container\").find(\"iframe\");\n        if (iframe.length) {\n          iframe.each(function () {\n            $(this).load(function () {\n              /* bind events on accessible iframes */\n              if (_canAccessIFrame(this)) {\n                $(this.contentDocument || this.contentWindow.document).bind(\"mousewheel.\" + namespace, function (e, delta) {\n                  _onMousewheel(e, delta);\n                });\n              }\n            });\n          });\n        }\n        mCustomScrollBox.bind(\"mousewheel.\" + namespace, function (e, delta) {\n          _onMousewheel(e, delta);\n        });\n        function _onMousewheel(e, delta) {\n          _stop($this);\n          if (_disableMousewheel($this, e.target)) {\n            return;\n          } /* disables mouse-wheel when hovering specific elements */\n          var deltaFactor = o.mouseWheel.deltaFactor !== \"auto\" ? parseInt(o.mouseWheel.deltaFactor) : oldIE && e.deltaFactor < 100 ? 100 : e.deltaFactor || 100,\n            dur = o.scrollInertia;\n          if (o.axis === \"x\" || o.mouseWheel.axis === \"x\") {\n            var dir = \"x\",\n              px = [Math.round(deltaFactor * d.scrollRatio.x), parseInt(o.mouseWheel.scrollAmount)],\n              amount = o.mouseWheel.scrollAmount !== \"auto\" ? px[1] : px[0] >= mCustomScrollBox.width() ? mCustomScrollBox.width() * 0.9 : px[0],\n              contentPos = Math.abs($(\"#mCSB_\" + d.idx + \"_container\")[0].offsetLeft),\n              draggerPos = mCSB_dragger[1][0].offsetLeft,\n              limit = mCSB_dragger[1].parent().width() - mCSB_dragger[1].width(),\n              dlt = e.deltaX || e.deltaY || delta;\n          } else {\n            var dir = \"y\",\n              px = [Math.round(deltaFactor * d.scrollRatio.y), parseInt(o.mouseWheel.scrollAmount)],\n              amount = o.mouseWheel.scrollAmount !== \"auto\" ? px[1] : px[0] >= mCustomScrollBox.height() ? mCustomScrollBox.height() * 0.9 : px[0],\n              contentPos = Math.abs($(\"#mCSB_\" + d.idx + \"_container\")[0].offsetTop),\n              draggerPos = mCSB_dragger[0][0].offsetTop,\n              limit = mCSB_dragger[0].parent().height() - mCSB_dragger[0].height(),\n              dlt = e.deltaY || delta;\n          }\n          if (dir === \"y\" && !d.overflowed[0] || dir === \"x\" && !d.overflowed[1]) {\n            return;\n          }\n          if (o.mouseWheel.invert || e.webkitDirectionInvertedFromDevice) {\n            dlt = -dlt;\n          }\n          if (o.mouseWheel.normalizeDelta) {\n            dlt = dlt < 0 ? -1 : 1;\n          }\n          if (dlt > 0 && draggerPos !== 0 || dlt < 0 && draggerPos !== limit || o.mouseWheel.preventDefault) {\n            e.stopImmediatePropagation();\n            e.preventDefault();\n          }\n          if (e.deltaFactor < 2 && !o.mouseWheel.normalizeDelta) {\n            //very low deltaFactor values mean some kind of delta acceleration (e.g. osx trackpad), so adjusting scrolling accordingly\n            amount = e.deltaFactor;\n            dur = 17;\n          }\n          _scrollTo($this, (contentPos - dlt * amount).toString(), {\n            dir: dir,\n            dur: dur\n          });\n        }\n      },\n      /* -------------------- */\n\n      /* checks if iframe can be accessed */\n      _canAccessIFrame = function (iframe) {\n        var html = null;\n        if (!iframe) {\n          try {\n            var doc = top.document;\n            html = doc.body.innerHTML;\n          } catch (err) {/* do nothing */}\n          return html !== null;\n        } else {\n          try {\n            var doc = iframe.contentDocument || iframe.contentWindow.document;\n            html = doc.body.innerHTML;\n          } catch (err) {/* do nothing */}\n          return html !== null;\n        }\n      },\n      /* -------------------- */\n\n      /* disables mouse-wheel when hovering specific elements like select, datalist etc. */\n      _disableMousewheel = function (el, target) {\n        var tag = target.nodeName.toLowerCase(),\n          tags = el.data(pluginPfx).opt.mouseWheel.disableOver,\n          /* elements that require focus */\n          focusTags = [\"select\", \"textarea\"];\n        return $.inArray(tag, tags) > -1 && !($.inArray(tag, focusTags) > -1 && !$(target).is(\":focus\"));\n      },\n      /* -------------------- */\n\n      /* \r\n      DRAGGER RAIL CLICK EVENT\r\n      scrolls content via dragger rail \r\n      */\n      _draggerRail = function () {\n        var $this = $(this),\n          d = $this.data(pluginPfx),\n          namespace = pluginPfx + \"_\" + d.idx,\n          mCSB_container = $(\"#mCSB_\" + d.idx + \"_container\"),\n          wrapper = mCSB_container.parent(),\n          mCSB_draggerContainer = $(\".mCSB_\" + d.idx + \"_scrollbar .\" + classes[12]),\n          clickable;\n        mCSB_draggerContainer.bind(\"mousedown.\" + namespace + \" touchstart.\" + namespace + \" pointerdown.\" + namespace + \" MSPointerDown.\" + namespace, function (e) {\n          touchActive = true;\n          if (!$(e.target).hasClass(\"mCSB_dragger\")) {\n            clickable = 1;\n          }\n        }).bind(\"touchend.\" + namespace + \" pointerup.\" + namespace + \" MSPointerUp.\" + namespace, function (e) {\n          touchActive = false;\n        }).bind(\"click.\" + namespace, function (e) {\n          if (!clickable) {\n            return;\n          }\n          clickable = 0;\n          if ($(e.target).hasClass(classes[12]) || $(e.target).hasClass(\"mCSB_draggerRail\")) {\n            _stop($this);\n            var el = $(this),\n              mCSB_dragger = el.find(\".mCSB_dragger\");\n            if (el.parent(\".mCSB_scrollTools_horizontal\").length > 0) {\n              if (!d.overflowed[1]) {\n                return;\n              }\n              var dir = \"x\",\n                clickDir = e.pageX > mCSB_dragger.offset().left ? -1 : 1,\n                to = Math.abs(mCSB_container[0].offsetLeft) - clickDir * (wrapper.width() * 0.9);\n            } else {\n              if (!d.overflowed[0]) {\n                return;\n              }\n              var dir = \"y\",\n                clickDir = e.pageY > mCSB_dragger.offset().top ? -1 : 1,\n                to = Math.abs(mCSB_container[0].offsetTop) - clickDir * (wrapper.height() * 0.9);\n            }\n            _scrollTo($this, to.toString(), {\n              dir: dir,\n              scrollEasing: \"mcsEaseInOut\"\n            });\n          }\n        });\n      },\n      /* -------------------- */\n\n      /* \r\n      FOCUS EVENT\r\n      scrolls content via element focus (e.g. clicking an input, pressing TAB key etc.)\r\n      */\n      _focus = function () {\n        var $this = $(this),\n          d = $this.data(pluginPfx),\n          o = d.opt,\n          namespace = pluginPfx + \"_\" + d.idx,\n          mCSB_container = $(\"#mCSB_\" + d.idx + \"_container\"),\n          wrapper = mCSB_container.parent();\n        mCSB_container.bind(\"focusin.\" + namespace, function (e) {\n          var el = $(document.activeElement),\n            nested = mCSB_container.find(\".mCustomScrollBox\").length,\n            dur = 0;\n          if (!el.is(o.advanced.autoScrollOnFocus)) {\n            return;\n          }\n          _stop($this);\n          clearTimeout($this[0]._focusTimeout);\n          $this[0]._focusTimer = nested ? (dur + 17) * nested : 0;\n          $this[0]._focusTimeout = setTimeout(function () {\n            var to = [_childPos(el)[0], _childPos(el)[1]],\n              contentPos = [mCSB_container[0].offsetTop, mCSB_container[0].offsetLeft],\n              isVisible = [contentPos[0] + to[0] >= 0 && contentPos[0] + to[0] < wrapper.height() - el.outerHeight(false), contentPos[1] + to[1] >= 0 && contentPos[0] + to[1] < wrapper.width() - el.outerWidth(false)],\n              overwrite = o.axis === \"yx\" && !isVisible[0] && !isVisible[1] ? \"none\" : \"all\";\n            if (o.axis !== \"x\" && !isVisible[0]) {\n              _scrollTo($this, to[0].toString(), {\n                dir: \"y\",\n                scrollEasing: \"mcsEaseInOut\",\n                overwrite: overwrite,\n                dur: dur\n              });\n            }\n            if (o.axis !== \"y\" && !isVisible[1]) {\n              _scrollTo($this, to[1].toString(), {\n                dir: \"x\",\n                scrollEasing: \"mcsEaseInOut\",\n                overwrite: overwrite,\n                dur: dur\n              });\n            }\n          }, $this[0]._focusTimer);\n        });\n      },\n      /* -------------------- */\n\n      /* sets content wrapper scrollTop/scrollLeft always to 0 */\n      _wrapperScroll = function () {\n        var $this = $(this),\n          d = $this.data(pluginPfx),\n          namespace = pluginPfx + \"_\" + d.idx,\n          wrapper = $(\"#mCSB_\" + d.idx + \"_container\").parent();\n        wrapper.bind(\"scroll.\" + namespace, function (e) {\n          if (wrapper.scrollTop() !== 0 || wrapper.scrollLeft() !== 0) {\n            $(\".mCSB_\" + d.idx + \"_scrollbar\").css(\"visibility\", \"hidden\"); /* hide scrollbar(s) */\n          }\n        });\n      },\n      /* -------------------- */\n\n      /* \r\n      BUTTONS EVENTS\r\n      scrolls content via up, down, left and right buttons \r\n      */\n      _buttons = function () {\n        var $this = $(this),\n          d = $this.data(pluginPfx),\n          o = d.opt,\n          seq = d.sequential,\n          namespace = pluginPfx + \"_\" + d.idx,\n          sel = \".mCSB_\" + d.idx + \"_scrollbar\",\n          btn = $(sel + \">a\");\n        btn.bind(\"mousedown.\" + namespace + \" touchstart.\" + namespace + \" pointerdown.\" + namespace + \" MSPointerDown.\" + namespace + \" mouseup.\" + namespace + \" touchend.\" + namespace + \" pointerup.\" + namespace + \" MSPointerUp.\" + namespace + \" mouseout.\" + namespace + \" pointerout.\" + namespace + \" MSPointerOut.\" + namespace + \" click.\" + namespace, function (e) {\n          e.preventDefault();\n          if (!_mouseBtnLeft(e)) {\n            return;\n          } /* left mouse button only */\n          var btnClass = $(this).attr(\"class\");\n          seq.type = o.scrollButtons.scrollType;\n          switch (e.type) {\n            case \"mousedown\":\n            case \"touchstart\":\n            case \"pointerdown\":\n            case \"MSPointerDown\":\n              if (seq.type === \"stepped\") {\n                return;\n              }\n              touchActive = true;\n              d.tweenRunning = false;\n              _seq(\"on\", btnClass);\n              break;\n            case \"mouseup\":\n            case \"touchend\":\n            case \"pointerup\":\n            case \"MSPointerUp\":\n            case \"mouseout\":\n            case \"pointerout\":\n            case \"MSPointerOut\":\n              if (seq.type === \"stepped\") {\n                return;\n              }\n              touchActive = false;\n              if (seq.dir) {\n                _seq(\"off\", btnClass);\n              }\n              break;\n            case \"click\":\n              if (seq.type !== \"stepped\" || d.tweenRunning) {\n                return;\n              }\n              _seq(\"on\", btnClass);\n              break;\n          }\n          function _seq(a, c) {\n            seq.scrollAmount = o.scrollButtons.scrollAmount;\n            _sequentialScroll($this, a, c);\n          }\n        });\n      },\n      /* -------------------- */\n\n      /* \r\n      KEYBOARD EVENTS\r\n      scrolls content via keyboard \r\n      Keys: up arrow, down arrow, left arrow, right arrow, PgUp, PgDn, Home, End\r\n      */\n      _keyboard = function () {\n        var $this = $(this),\n          d = $this.data(pluginPfx),\n          o = d.opt,\n          seq = d.sequential,\n          namespace = pluginPfx + \"_\" + d.idx,\n          mCustomScrollBox = $(\"#mCSB_\" + d.idx),\n          mCSB_container = $(\"#mCSB_\" + d.idx + \"_container\"),\n          wrapper = mCSB_container.parent(),\n          editables = \"input,textarea,select,datalist,keygen,[contenteditable='true']\",\n          iframe = mCSB_container.find(\"iframe\"),\n          events = [\"blur.\" + namespace + \" keydown.\" + namespace + \" keyup.\" + namespace];\n        if (iframe.length) {\n          iframe.each(function () {\n            $(this).load(function () {\n              /* bind events on accessible iframes */\n              if (_canAccessIFrame(this)) {\n                $(this.contentDocument || this.contentWindow.document).bind(events[0], function (e) {\n                  _onKeyboard(e);\n                });\n              }\n            });\n          });\n        }\n        mCustomScrollBox.attr(\"tabindex\", \"0\").bind(events[0], function (e) {\n          _onKeyboard(e);\n        });\n        function _onKeyboard(e) {\n          switch (e.type) {\n            case \"blur\":\n              if (d.tweenRunning && seq.dir) {\n                _seq(\"off\", null);\n              }\n              break;\n            case \"keydown\":\n            case \"keyup\":\n              var code = e.keyCode ? e.keyCode : e.which,\n                action = \"on\";\n              if (o.axis !== \"x\" && (code === 38 || code === 40) || o.axis !== \"y\" && (code === 37 || code === 39)) {\n                /* up (38), down (40), left (37), right (39) arrows */\n                if ((code === 38 || code === 40) && !d.overflowed[0] || (code === 37 || code === 39) && !d.overflowed[1]) {\n                  return;\n                }\n                if (e.type === \"keyup\") {\n                  action = \"off\";\n                }\n                if (!$(document.activeElement).is(editables)) {\n                  e.preventDefault();\n                  e.stopImmediatePropagation();\n                  _seq(action, code);\n                }\n              } else if (code === 33 || code === 34) {\n                /* PgUp (33), PgDn (34) */\n                if (d.overflowed[0] || d.overflowed[1]) {\n                  e.preventDefault();\n                  e.stopImmediatePropagation();\n                }\n                if (e.type === \"keyup\") {\n                  _stop($this);\n                  var keyboardDir = code === 34 ? -1 : 1;\n                  if (o.axis === \"x\" || o.axis === \"yx\" && d.overflowed[1] && !d.overflowed[0]) {\n                    var dir = \"x\",\n                      to = Math.abs(mCSB_container[0].offsetLeft) - keyboardDir * (wrapper.width() * 0.9);\n                  } else {\n                    var dir = \"y\",\n                      to = Math.abs(mCSB_container[0].offsetTop) - keyboardDir * (wrapper.height() * 0.9);\n                  }\n                  _scrollTo($this, to.toString(), {\n                    dir: dir,\n                    scrollEasing: \"mcsEaseInOut\"\n                  });\n                }\n              } else if (code === 35 || code === 36) {\n                /* End (35), Home (36) */\n                if (!$(document.activeElement).is(editables)) {\n                  if (d.overflowed[0] || d.overflowed[1]) {\n                    e.preventDefault();\n                    e.stopImmediatePropagation();\n                  }\n                  if (e.type === \"keyup\") {\n                    if (o.axis === \"x\" || o.axis === \"yx\" && d.overflowed[1] && !d.overflowed[0]) {\n                      var dir = \"x\",\n                        to = code === 35 ? Math.abs(wrapper.width() - mCSB_container.outerWidth(false)) : 0;\n                    } else {\n                      var dir = \"y\",\n                        to = code === 35 ? Math.abs(wrapper.height() - mCSB_container.outerHeight(false)) : 0;\n                    }\n                    _scrollTo($this, to.toString(), {\n                      dir: dir,\n                      scrollEasing: \"mcsEaseInOut\"\n                    });\n                  }\n                }\n              }\n              break;\n          }\n          function _seq(a, c) {\n            seq.type = o.keyboard.scrollType;\n            seq.scrollAmount = o.keyboard.scrollAmount;\n            if (seq.type === \"stepped\" && d.tweenRunning) {\n              return;\n            }\n            _sequentialScroll($this, a, c);\n          }\n        }\n      },\n      /* -------------------- */\n\n      /* scrolls content sequentially (used when scrolling via buttons, keyboard arrows etc.) */\n      _sequentialScroll = function (el, action, trigger, e, s) {\n        var d = el.data(pluginPfx),\n          o = d.opt,\n          seq = d.sequential,\n          mCSB_container = $(\"#mCSB_\" + d.idx + \"_container\"),\n          once = seq.type === \"stepped\" ? true : false,\n          steplessSpeed = o.scrollInertia < 26 ? 26 : o.scrollInertia,\n          /* 26/1.5=17 */\n          steppedSpeed = o.scrollInertia < 1 ? 17 : o.scrollInertia;\n        switch (action) {\n          case \"on\":\n            seq.dir = [trigger === classes[16] || trigger === classes[15] || trigger === 39 || trigger === 37 ? \"x\" : \"y\", trigger === classes[13] || trigger === classes[15] || trigger === 38 || trigger === 37 ? -1 : 1];\n            _stop(el);\n            if (_isNumeric(trigger) && seq.type === \"stepped\") {\n              return;\n            }\n            _on(once);\n            break;\n          case \"off\":\n            _off();\n            if (once || d.tweenRunning && seq.dir) {\n              _on(true);\n            }\n            break;\n        }\n\n        /* starts sequence */\n        function _on(once) {\n          if (o.snapAmount) {\n            seq.scrollAmount = !(o.snapAmount instanceof Array) ? o.snapAmount : seq.dir[0] === \"x\" ? o.snapAmount[1] : o.snapAmount[0];\n          } /* scrolling snapping */\n          var c = seq.type !== \"stepped\",\n            /* continuous scrolling */\n            t = s ? s : !once ? 1000 / 60 : c ? steplessSpeed / 1.5 : steppedSpeed,\n            /* timer */\n            m = !once ? 2.5 : c ? 7.5 : 40,\n            /* multiplier */\n            contentPos = [Math.abs(mCSB_container[0].offsetTop), Math.abs(mCSB_container[0].offsetLeft)],\n            ratio = [d.scrollRatio.y > 10 ? 10 : d.scrollRatio.y, d.scrollRatio.x > 10 ? 10 : d.scrollRatio.x],\n            amount = seq.dir[0] === \"x\" ? contentPos[1] + seq.dir[1] * (ratio[1] * m) : contentPos[0] + seq.dir[1] * (ratio[0] * m),\n            px = seq.dir[0] === \"x\" ? contentPos[1] + seq.dir[1] * parseInt(seq.scrollAmount) : contentPos[0] + seq.dir[1] * parseInt(seq.scrollAmount),\n            to = seq.scrollAmount !== \"auto\" ? px : amount,\n            easing = e ? e : !once ? \"mcsLinear\" : c ? \"mcsLinearOut\" : \"mcsEaseInOut\",\n            onComplete = !once ? false : true;\n          if (once && t < 17) {\n            to = seq.dir[0] === \"x\" ? contentPos[1] : contentPos[0];\n          }\n          _scrollTo(el, to.toString(), {\n            dir: seq.dir[0],\n            scrollEasing: easing,\n            dur: t,\n            onComplete: onComplete\n          });\n          if (once) {\n            seq.dir = false;\n            return;\n          }\n          clearTimeout(seq.step);\n          seq.step = setTimeout(function () {\n            _on();\n          }, t);\n        }\n        /* stops sequence */\n        function _off() {\n          clearTimeout(seq.step);\n          _delete(seq, \"step\");\n          _stop(el);\n        }\n      },\n      /* -------------------- */\n\n      /* returns a yx array from value */\n      _arr = function (val) {\n        var o = $(this).data(pluginPfx).opt,\n          vals = [];\n        if (typeof val === \"function\") {\n          val = val();\n        } /* check if the value is a single anonymous function */\n        /* check if value is object or array, its length and create an array with yx values */\n        if (!(val instanceof Array)) {\n          /* object value (e.g. {y:\"100\",x:\"100\"}, 100 etc.) */\n          vals[0] = val.y ? val.y : val.x || o.axis === \"x\" ? null : val;\n          vals[1] = val.x ? val.x : val.y || o.axis === \"y\" ? null : val;\n        } else {\n          /* array value (e.g. [100,100]) */\n          vals = val.length > 1 ? [val[0], val[1]] : o.axis === \"x\" ? [null, val[0]] : [val[0], null];\n        }\n        /* check if array values are anonymous functions */\n        if (typeof vals[0] === \"function\") {\n          vals[0] = vals[0]();\n        }\n        if (typeof vals[1] === \"function\") {\n          vals[1] = vals[1]();\n        }\n        return vals;\n      },\n      /* -------------------- */\n\n      /* translates values (e.g. \"top\", 100, \"100px\", \"#id\") to actual scroll-to positions */\n      _to = function (val, dir) {\n        if (val == null || typeof val == \"undefined\") {\n          return;\n        }\n        var $this = $(this),\n          d = $this.data(pluginPfx),\n          o = d.opt,\n          mCSB_container = $(\"#mCSB_\" + d.idx + \"_container\"),\n          wrapper = mCSB_container.parent(),\n          t = typeof val;\n        if (!dir) {\n          dir = o.axis === \"x\" ? \"x\" : \"y\";\n        }\n        var contentLength = dir === \"x\" ? mCSB_container.outerWidth(false) : mCSB_container.outerHeight(false),\n          contentPos = dir === \"x\" ? mCSB_container[0].offsetLeft : mCSB_container[0].offsetTop,\n          cssProp = dir === \"x\" ? \"left\" : \"top\";\n        switch (t) {\n          case \"function\":\n            /* this currently is not used. Consider removing it */\n            return val();\n            break;\n          case \"object\":\n            /* js/jquery object */\n            var obj = val.jquery ? val : $(val);\n            if (!obj.length) {\n              return;\n            }\n            return dir === \"x\" ? _childPos(obj)[1] : _childPos(obj)[0];\n            break;\n          case \"string\":\n          case \"number\":\n            if (_isNumeric(val)) {\n              /* numeric value */\n              return Math.abs(val);\n            } else if (val.indexOf(\"%\") !== -1) {\n              /* percentage value */\n              return Math.abs(contentLength * parseInt(val) / 100);\n            } else if (val.indexOf(\"-=\") !== -1) {\n              /* decrease value */\n              return Math.abs(contentPos - parseInt(val.split(\"-=\")[1]));\n            } else if (val.indexOf(\"+=\") !== -1) {\n              /* inrease value */\n              var p = contentPos + parseInt(val.split(\"+=\")[1]);\n              return p >= 0 ? 0 : Math.abs(p);\n            } else if (val.indexOf(\"px\") !== -1 && _isNumeric(val.split(\"px\")[0])) {\n              /* pixels string value (e.g. \"100px\") */\n              return Math.abs(val.split(\"px\")[0]);\n            } else {\n              if (val === \"top\" || val === \"left\") {\n                /* special strings */\n                return 0;\n              } else if (val === \"bottom\") {\n                return Math.abs(wrapper.height() - mCSB_container.outerHeight(false));\n              } else if (val === \"right\") {\n                return Math.abs(wrapper.width() - mCSB_container.outerWidth(false));\n              } else if (val === \"first\" || val === \"last\") {\n                var obj = mCSB_container.find(\":\" + val);\n                return dir === \"x\" ? _childPos(obj)[1] : _childPos(obj)[0];\n              } else {\n                if ($(val).length) {\n                  /* jquery selector */\n                  return dir === \"x\" ? _childPos($(val))[1] : _childPos($(val))[0];\n                } else {\n                  /* other values (e.g. \"100em\") */\n                  mCSB_container.css(cssProp, val);\n                  methods.update.call(null, $this[0]);\n                  return;\n                }\n              }\n            }\n            break;\n        }\n      },\n      /* -------------------- */\n\n      /* calls the update method automatically */\n      _autoUpdate = function (rem) {\n        var $this = $(this),\n          d = $this.data(pluginPfx),\n          o = d.opt,\n          mCSB_container = $(\"#mCSB_\" + d.idx + \"_container\");\n        if (rem) {\n          /* \r\n          removes autoUpdate timer \r\n          usage: _autoUpdate.call(this,\"remove\");\r\n          */\n          clearTimeout(mCSB_container[0].autoUpdate);\n          _delete(mCSB_container[0], \"autoUpdate\");\n          return;\n        }\n        upd();\n        function upd() {\n          clearTimeout(mCSB_container[0].autoUpdate);\n          if ($this.parents(\"html\").length === 0) {\n            /* check element in dom tree */\n            $this = null;\n            return;\n          }\n          mCSB_container[0].autoUpdate = setTimeout(function () {\n            /* update on specific selector(s) length and size change */\n            if (o.advanced.updateOnSelectorChange) {\n              d.poll.change.n = sizesSum();\n              if (d.poll.change.n !== d.poll.change.o) {\n                d.poll.change.o = d.poll.change.n;\n                doUpd(3);\n                return;\n              }\n            }\n            /* update on main element and scrollbar size changes */\n            if (o.advanced.updateOnContentResize) {\n              d.poll.size.n = $this[0].scrollHeight + $this[0].scrollWidth + mCSB_container[0].offsetHeight + $this[0].offsetHeight + $this[0].offsetWidth;\n              if (d.poll.size.n !== d.poll.size.o) {\n                d.poll.size.o = d.poll.size.n;\n                doUpd(1);\n                return;\n              }\n            }\n            /* update on image load */\n            if (o.advanced.updateOnImageLoad) {\n              if (!(o.advanced.updateOnImageLoad === \"auto\" && o.axis === \"y\")) {\n                //by default, it doesn't run on vertical content\n                d.poll.img.n = mCSB_container.find(\"img\").length;\n                if (d.poll.img.n !== d.poll.img.o) {\n                  d.poll.img.o = d.poll.img.n;\n                  mCSB_container.find(\"img\").each(function () {\n                    imgLoader(this);\n                  });\n                  return;\n                }\n              }\n            }\n            if (o.advanced.updateOnSelectorChange || o.advanced.updateOnContentResize || o.advanced.updateOnImageLoad) {\n              upd();\n            }\n          }, o.advanced.autoUpdateTimeout);\n        }\n        /* a tiny image loader */\n        function imgLoader(el) {\n          if ($(el).hasClass(classes[2])) {\n            doUpd();\n            return;\n          }\n          var img = new Image();\n          function createDelegate(contextObject, delegateMethod) {\n            return function () {\n              return delegateMethod.apply(contextObject, arguments);\n            };\n          }\n          function imgOnLoad() {\n            this.onload = null;\n            $(el).addClass(classes[2]);\n            doUpd(2);\n          }\n          img.onload = createDelegate(img, imgOnLoad);\n          img.src = el.src;\n        }\n        /* returns the total height and width sum of all elements matching the selector */\n        function sizesSum() {\n          if (o.advanced.updateOnSelectorChange === true) {\n            o.advanced.updateOnSelectorChange = \"*\";\n          }\n          var total = 0,\n            sel = mCSB_container.find(o.advanced.updateOnSelectorChange);\n          if (o.advanced.updateOnSelectorChange && sel.length > 0) {\n            sel.each(function () {\n              total += this.offsetHeight + this.offsetWidth;\n            });\n          }\n          return total;\n        }\n        /* calls the update method */\n        function doUpd(cb) {\n          clearTimeout(mCSB_container[0].autoUpdate);\n          methods.update.call(null, $this[0], cb);\n        }\n      },\n      /* -------------------- */\n\n      /* snaps scrolling to a multiple of a pixels number */\n      _snapAmount = function (to, amount, offset) {\n        return Math.round(to / amount) * amount - offset;\n      },\n      /* -------------------- */\n\n      /* stops content and scrollbar animations */\n      _stop = function (el) {\n        var d = el.data(pluginPfx),\n          sel = $(\"#mCSB_\" + d.idx + \"_container,#mCSB_\" + d.idx + \"_container_wrapper,#mCSB_\" + d.idx + \"_dragger_vertical,#mCSB_\" + d.idx + \"_dragger_horizontal\");\n        sel.each(function () {\n          _stopTween.call(this);\n        });\n      },\n      /* -------------------- */\n\n      /* \r\n      ANIMATES CONTENT \r\n      This is where the actual scrolling happens\r\n      */\n      _scrollTo = function (el, to, options) {\n        var d = el.data(pluginPfx),\n          o = d.opt,\n          defaults = {\n            trigger: \"internal\",\n            dir: \"y\",\n            scrollEasing: \"mcsEaseOut\",\n            drag: false,\n            dur: o.scrollInertia,\n            overwrite: \"all\",\n            callbacks: true,\n            onStart: true,\n            onUpdate: true,\n            onComplete: true\n          },\n          options = $.extend(defaults, options),\n          dur = [options.dur, options.drag ? 0 : options.dur],\n          mCustomScrollBox = $(\"#mCSB_\" + d.idx),\n          mCSB_container = $(\"#mCSB_\" + d.idx + \"_container\"),\n          wrapper = mCSB_container.parent(),\n          totalScrollOffsets = o.callbacks.onTotalScrollOffset ? _arr.call(el, o.callbacks.onTotalScrollOffset) : [0, 0],\n          totalScrollBackOffsets = o.callbacks.onTotalScrollBackOffset ? _arr.call(el, o.callbacks.onTotalScrollBackOffset) : [0, 0];\n        d.trigger = options.trigger;\n        if (wrapper.scrollTop() !== 0 || wrapper.scrollLeft() !== 0) {\n          /* always reset scrollTop/Left */\n          $(\".mCSB_\" + d.idx + \"_scrollbar\").css(\"visibility\", \"visible\");\n          wrapper.scrollTop(0).scrollLeft(0);\n        }\n        if (to === \"_resetY\" && !d.contentReset.y) {\n          /* callbacks: onOverflowYNone */\n          if (_cb(\"onOverflowYNone\")) {\n            o.callbacks.onOverflowYNone.call(el[0]);\n          }\n          d.contentReset.y = 1;\n        }\n        if (to === \"_resetX\" && !d.contentReset.x) {\n          /* callbacks: onOverflowXNone */\n          if (_cb(\"onOverflowXNone\")) {\n            o.callbacks.onOverflowXNone.call(el[0]);\n          }\n          d.contentReset.x = 1;\n        }\n        if (to === \"_resetY\" || to === \"_resetX\") {\n          return;\n        }\n        if ((d.contentReset.y || !el[0].mcs) && d.overflowed[0]) {\n          /* callbacks: onOverflowY */\n          if (_cb(\"onOverflowY\")) {\n            o.callbacks.onOverflowY.call(el[0]);\n          }\n          d.contentReset.x = null;\n        }\n        if ((d.contentReset.x || !el[0].mcs) && d.overflowed[1]) {\n          /* callbacks: onOverflowX */\n          if (_cb(\"onOverflowX\")) {\n            o.callbacks.onOverflowX.call(el[0]);\n          }\n          d.contentReset.x = null;\n        }\n        if (o.snapAmount) {\n          /* scrolling snapping */\n          var snapAmount = !(o.snapAmount instanceof Array) ? o.snapAmount : options.dir === \"x\" ? o.snapAmount[1] : o.snapAmount[0];\n          to = _snapAmount(to, snapAmount, o.snapOffset);\n        }\n        switch (options.dir) {\n          case \"x\":\n            var mCSB_dragger = $(\"#mCSB_\" + d.idx + \"_dragger_horizontal\"),\n              property = \"left\",\n              contentPos = mCSB_container[0].offsetLeft,\n              limit = [mCustomScrollBox.width() - mCSB_container.outerWidth(false), mCSB_dragger.parent().width() - mCSB_dragger.width()],\n              scrollTo = [to, to === 0 ? 0 : to / d.scrollRatio.x],\n              tso = totalScrollOffsets[1],\n              tsbo = totalScrollBackOffsets[1],\n              totalScrollOffset = tso > 0 ? tso / d.scrollRatio.x : 0,\n              totalScrollBackOffset = tsbo > 0 ? tsbo / d.scrollRatio.x : 0;\n            break;\n          case \"y\":\n            var mCSB_dragger = $(\"#mCSB_\" + d.idx + \"_dragger_vertical\"),\n              property = \"top\",\n              contentPos = mCSB_container[0].offsetTop,\n              limit = [mCustomScrollBox.height() - mCSB_container.outerHeight(false), mCSB_dragger.parent().height() - mCSB_dragger.height()],\n              scrollTo = [to, to === 0 ? 0 : to / d.scrollRatio.y],\n              tso = totalScrollOffsets[0],\n              tsbo = totalScrollBackOffsets[0],\n              totalScrollOffset = tso > 0 ? tso / d.scrollRatio.y : 0,\n              totalScrollBackOffset = tsbo > 0 ? tsbo / d.scrollRatio.y : 0;\n            break;\n        }\n        if (scrollTo[1] < 0 || scrollTo[0] === 0 && scrollTo[1] === 0) {\n          scrollTo = [0, 0];\n        } else if (scrollTo[1] >= limit[1]) {\n          scrollTo = [limit[0], limit[1]];\n        } else {\n          scrollTo[0] = -scrollTo[0];\n        }\n        if (!el[0].mcs) {\n          _mcs(); /* init mcs object (once) to make it available before callbacks */\n          if (_cb(\"onInit\")) {\n            o.callbacks.onInit.call(el[0]);\n          } /* callbacks: onInit */\n        }\n\n        clearTimeout(mCSB_container[0].onCompleteTimeout);\n        _tweenTo(mCSB_dragger[0], property, Math.round(scrollTo[1]), dur[1], options.scrollEasing);\n        if (!d.tweenRunning && (contentPos === 0 && scrollTo[0] >= 0 || contentPos === limit[0] && scrollTo[0] <= limit[0])) {\n          return;\n        }\n        _tweenTo(mCSB_container[0], property, Math.round(scrollTo[0]), dur[0], options.scrollEasing, options.overwrite, {\n          onStart: function () {\n            if (options.callbacks && options.onStart && !d.tweenRunning) {\n              /* callbacks: onScrollStart */\n              if (_cb(\"onScrollStart\")) {\n                _mcs();\n                o.callbacks.onScrollStart.call(el[0]);\n              }\n              d.tweenRunning = true;\n              _onDragClasses(mCSB_dragger);\n              d.cbOffsets = _cbOffsets();\n            }\n          },\n          onUpdate: function () {\n            if (options.callbacks && options.onUpdate) {\n              /* callbacks: whileScrolling */\n              if (_cb(\"whileScrolling\")) {\n                _mcs();\n                o.callbacks.whileScrolling.call(el[0]);\n              }\n            }\n          },\n          onComplete: function () {\n            if (options.callbacks && options.onComplete) {\n              if (o.axis === \"yx\") {\n                clearTimeout(mCSB_container[0].onCompleteTimeout);\n              }\n              var t = mCSB_container[0].idleTimer || 0;\n              mCSB_container[0].onCompleteTimeout = setTimeout(function () {\n                /* callbacks: onScroll, onTotalScroll, onTotalScrollBack */\n                if (_cb(\"onScroll\")) {\n                  _mcs();\n                  o.callbacks.onScroll.call(el[0]);\n                }\n                if (_cb(\"onTotalScroll\") && scrollTo[1] >= limit[1] - totalScrollOffset && d.cbOffsets[0]) {\n                  _mcs();\n                  o.callbacks.onTotalScroll.call(el[0]);\n                }\n                if (_cb(\"onTotalScrollBack\") && scrollTo[1] <= totalScrollBackOffset && d.cbOffsets[1]) {\n                  _mcs();\n                  o.callbacks.onTotalScrollBack.call(el[0]);\n                }\n                d.tweenRunning = false;\n                mCSB_container[0].idleTimer = 0;\n                _onDragClasses(mCSB_dragger, \"hide\");\n              }, t);\n            }\n          }\n        });\n        /* checks if callback function exists */\n        function _cb(cb) {\n          return d && o.callbacks[cb] && typeof o.callbacks[cb] === \"function\";\n        }\n        /* checks whether callback offsets always trigger */\n        function _cbOffsets() {\n          return [o.callbacks.alwaysTriggerOffsets || contentPos >= limit[0] + tso, o.callbacks.alwaysTriggerOffsets || contentPos <= -tsbo];\n        }\n        /* \r\n        populates object with useful values for the user \r\n        values: \r\n        \tcontent: this.mcs.content\r\n        \tcontent top position: this.mcs.top \r\n        \tcontent left position: this.mcs.left \r\n        \tdragger top position: this.mcs.draggerTop \r\n        \tdragger left position: this.mcs.draggerLeft \r\n        \tscrolling y percentage: this.mcs.topPct \r\n        \tscrolling x percentage: this.mcs.leftPct \r\n        \tscrolling direction: this.mcs.direction\r\n        */\n        function _mcs() {\n          var cp = [mCSB_container[0].offsetTop, mCSB_container[0].offsetLeft],\n            /* content position */\n            dp = [mCSB_dragger[0].offsetTop, mCSB_dragger[0].offsetLeft],\n            /* dragger position */\n            cl = [mCSB_container.outerHeight(false), mCSB_container.outerWidth(false)],\n            /* content length */\n            pl = [mCustomScrollBox.height(), mCustomScrollBox.width()]; /* content parent length */\n          el[0].mcs = {\n            content: mCSB_container,\n            /* original content wrapper as jquery object */\n            top: cp[0],\n            left: cp[1],\n            draggerTop: dp[0],\n            draggerLeft: dp[1],\n            topPct: Math.round(100 * Math.abs(cp[0]) / (Math.abs(cl[0]) - pl[0])),\n            leftPct: Math.round(100 * Math.abs(cp[1]) / (Math.abs(cl[1]) - pl[1])),\n            direction: options.dir\n          };\n          /* \r\n          this refers to the original element containing the scrollbar(s)\r\n          usage: this.mcs.top, this.mcs.leftPct etc. \r\n          */\n        }\n      },\n      /* -------------------- */\n\n      /* \r\n      CUSTOM JAVASCRIPT ANIMATION TWEEN \r\n      Lighter and faster than jquery animate() and css transitions \r\n      Animates top/left properties and includes easings \r\n      */\n      _tweenTo = function (el, prop, to, duration, easing, overwrite, callbacks) {\n        if (!el._mTween) {\n          el._mTween = {\n            top: {},\n            left: {}\n          };\n        }\n        var callbacks = callbacks || {},\n          onStart = callbacks.onStart || function () {},\n          onUpdate = callbacks.onUpdate || function () {},\n          onComplete = callbacks.onComplete || function () {},\n          startTime = _getTime(),\n          _delay,\n          progress = 0,\n          from = el.offsetTop,\n          elStyle = el.style,\n          _request,\n          tobj = el._mTween[prop];\n        if (prop === \"left\") {\n          from = el.offsetLeft;\n        }\n        var diff = to - from;\n        tobj.stop = 0;\n        if (overwrite !== \"none\") {\n          _cancelTween();\n        }\n        _startTween();\n        function _step() {\n          if (tobj.stop) {\n            return;\n          }\n          if (!progress) {\n            onStart.call();\n          }\n          progress = _getTime() - startTime;\n          _tween();\n          if (progress >= tobj.time) {\n            tobj.time = progress > tobj.time ? progress + _delay - (progress - tobj.time) : progress + _delay - 1;\n            if (tobj.time < progress + 1) {\n              tobj.time = progress + 1;\n            }\n          }\n          if (tobj.time < duration) {\n            tobj.id = _request(_step);\n          } else {\n            onComplete.call();\n          }\n        }\n        function _tween() {\n          if (duration > 0) {\n            tobj.currVal = _ease(tobj.time, from, diff, duration, easing);\n            elStyle[prop] = Math.round(tobj.currVal) + \"px\";\n          } else {\n            elStyle[prop] = to + \"px\";\n          }\n          onUpdate.call();\n        }\n        function _startTween() {\n          _delay = 1000 / 60;\n          tobj.time = progress + _delay;\n          _request = !window.requestAnimationFrame ? function (f) {\n            _tween();\n            return setTimeout(f, 0.01);\n          } : window.requestAnimationFrame;\n          tobj.id = _request(_step);\n        }\n        function _cancelTween() {\n          if (tobj.id == null) {\n            return;\n          }\n          if (!window.requestAnimationFrame) {\n            clearTimeout(tobj.id);\n          } else {\n            window.cancelAnimationFrame(tobj.id);\n          }\n          tobj.id = null;\n        }\n        function _ease(t, b, c, d, type) {\n          switch (type) {\n            case \"linear\":\n            case \"mcsLinear\":\n              return c * t / d + b;\n              break;\n            case \"mcsLinearOut\":\n              t /= d;\n              t--;\n              return c * Math.sqrt(1 - t * t) + b;\n              break;\n            case \"easeInOutSmooth\":\n              t /= d / 2;\n              if (t < 1) return c / 2 * t * t + b;\n              t--;\n              return -c / 2 * (t * (t - 2) - 1) + b;\n              break;\n            case \"easeInOutStrong\":\n              t /= d / 2;\n              if (t < 1) return c / 2 * Math.pow(2, 10 * (t - 1)) + b;\n              t--;\n              return c / 2 * (-Math.pow(2, -10 * t) + 2) + b;\n              break;\n            case \"easeInOut\":\n            case \"mcsEaseInOut\":\n              t /= d / 2;\n              if (t < 1) return c / 2 * t * t * t + b;\n              t -= 2;\n              return c / 2 * (t * t * t + 2) + b;\n              break;\n            case \"easeOutSmooth\":\n              t /= d;\n              t--;\n              return -c * (t * t * t * t - 1) + b;\n              break;\n            case \"easeOutStrong\":\n              return c * (-Math.pow(2, -10 * t / d) + 1) + b;\n              break;\n            case \"easeOut\":\n            case \"mcsEaseOut\":\n            default:\n              var ts = (t /= d) * t,\n                tc = ts * t;\n              return b + c * (0.499999999999997 * tc * ts + -2.5 * ts * ts + 5.5 * tc + -6.5 * ts + 4 * t);\n          }\n        }\n      },\n      /* -------------------- */\n\n      /* returns current time */\n      _getTime = function () {\n        if (window.performance && window.performance.now) {\n          return window.performance.now();\n        } else {\n          if (window.performance && window.performance.webkitNow) {\n            return window.performance.webkitNow();\n          } else {\n            if (Date.now) {\n              return Date.now();\n            } else {\n              return new Date().getTime();\n            }\n          }\n        }\n      },\n      /* -------------------- */\n\n      /* stops a tween */\n      _stopTween = function () {\n        var el = this;\n        if (!el._mTween) {\n          el._mTween = {\n            top: {},\n            left: {}\n          };\n        }\n        var props = [\"top\", \"left\"];\n        for (var i = 0; i < props.length; i++) {\n          var prop = props[i];\n          if (el._mTween[prop].id) {\n            if (!window.requestAnimationFrame) {\n              clearTimeout(el._mTween[prop].id);\n            } else {\n              window.cancelAnimationFrame(el._mTween[prop].id);\n            }\n            el._mTween[prop].id = null;\n            el._mTween[prop].stop = 1;\n          }\n        }\n      },\n      /* -------------------- */\n\n      /* deletes a property (avoiding the exception thrown by IE) */\n      _delete = function (c, m) {\n        try {\n          delete c[m];\n        } catch (e) {\n          c[m] = null;\n        }\n      },\n      /* -------------------- */\n\n      /* detects left mouse button */\n      _mouseBtnLeft = function (e) {\n        return !(e.which && e.which !== 1);\n      },\n      /* -------------------- */\n\n      /* detects if pointer type event is touch */\n      _pointerTouch = function (e) {\n        var t = e.originalEvent.pointerType;\n        return !(t && t !== \"touch\" && t !== 2);\n      },\n      /* -------------------- */\n\n      /* checks if value is numeric */\n      _isNumeric = function (val) {\n        return !isNaN(parseFloat(val)) && isFinite(val);\n      },\n      /* -------------------- */\n\n      /* returns element position according to content */\n      _childPos = function (el) {\n        var p = el.parents(\".mCSB_container\");\n        return [el.offset().top - p.offset().top, el.offset().left - p.offset().left];\n      },\n      /* -------------------- */\n\n      /* checks if browser tab is hidden/inactive via Page Visibility API */\n      _isTabHidden = function () {\n        var prop = _getHiddenProp();\n        if (!prop) return false;\n        return document[prop];\n        function _getHiddenProp() {\n          var pfx = [\"webkit\", \"moz\", \"ms\", \"o\"];\n          if (\"hidden\" in document) return \"hidden\"; //natively supported\n          for (var i = 0; i < pfx.length; i++) {\n            //prefixed\n            if (pfx[i] + \"Hidden\" in document) return pfx[i] + \"Hidden\";\n          }\n          return null; //not supported\n        }\n      };\n    /* -------------------- */\n\n    /* \r\n    ----------------------------------------\r\n    PLUGIN SETUP \r\n    ----------------------------------------\r\n    */\n\n    /* plugin constructor functions */\n    $.fn[pluginNS] = function (method) {\n      /* usage: $(selector).mCustomScrollbar(); */\n      if (methods[method]) {\n        return methods[method].apply(this, Array.prototype.slice.call(arguments, 1));\n      } else if (typeof method === \"object\" || !method) {\n        return methods.init.apply(this, arguments);\n      } else {\n        $.error(\"Method \" + method + \" does not exist\");\n      }\n    };\n    $[pluginNS] = function (method) {\n      /* usage: $.mCustomScrollbar(); */\n      if (methods[method]) {\n        return methods[method].apply(this, Array.prototype.slice.call(arguments, 1));\n      } else if (typeof method === \"object\" || !method) {\n        return methods.init.apply(this, arguments);\n      } else {\n        $.error(\"Method \" + method + \" does not exist\");\n      }\n    };\n\n    /* \r\n    allow setting plugin default options. \r\n    usage: $.mCustomScrollbar.defaults.scrollInertia=500; \r\n    to apply any changed default options on default selectors (below), use inside document ready fn \r\n    e.g.: $(document).ready(function(){ $.mCustomScrollbar.defaults.scrollInertia=500; });\r\n    */\n    $[pluginNS].defaults = defaults;\n\n    /* \r\n    add window object (window.mCustomScrollbar) \r\n    usage: if(window.mCustomScrollbar){console.log(\"custom scrollbar plugin loaded\");}\r\n    */\n    window[pluginNS] = true;\n    $(window).load(function () {\n      $(defaultSelector)[pluginNS](); /* add scrollbars automatically on default selector */\n\n      /* extend jQuery expressions */\n      $.extend($.expr[\":\"], {\n        /* checks if element is within scrollable viewport */\n        mcsInView: $.expr[\":\"].mcsInView || function (el) {\n          var $el = $(el),\n            content = $el.parents(\".mCSB_container\"),\n            wrapper,\n            cPos;\n          if (!content.length) {\n            return;\n          }\n          wrapper = content.parent();\n          cPos = [content[0].offsetTop, content[0].offsetLeft];\n          return cPos[0] + _childPos($el)[0] >= 0 && cPos[0] + _childPos($el)[0] < wrapper.height() - $el.outerHeight(false) && cPos[1] + _childPos($el)[1] >= 0 && cPos[1] + _childPos($el)[1] < wrapper.width() - $el.outerWidth(false);\n        },\n        /* checks if element is overflowed having visible scrollbar(s) */\n        mcsOverflow: $.expr[\":\"].mcsOverflow || function (el) {\n          var d = $(el).data(pluginPfx);\n          if (!d) {\n            return;\n          }\n          return d.overflowed[0] || d.overflowed[1];\n        }\n      });\n    });\n  });\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}